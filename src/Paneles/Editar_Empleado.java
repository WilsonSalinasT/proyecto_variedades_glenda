/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Paneles;

import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;

/**
 *
 * @author Admin
 */
public class Editar_Empleado extends javax.swing.JPanel {

    /**
     * Creates new form Editar_Empleado
     */
    public Editar_Empleado() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        txtNombre1 = new javax.swing.JTextField();
        txtNombre2 = new javax.swing.JTextField();
        txtApellido1 = new javax.swing.JTextField();
        txtApellido2 = new javax.swing.JTextField();
        txtRtn = new javax.swing.JTextField();
        txtNacionalidad = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        txt_RefeDireccion = new javax.swing.JTextField();
        txtCelular = new javax.swing.JTextField();
        txt_FijoCel = new javax.swing.JTextField();
        txtDni = new javax.swing.JTextField();
        cbxAldea = new javax.swing.JComboBox<>();
        cbxMuni = new javax.swing.JComboBox<>();
        txtSalario = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        lbl_id = new javax.swing.JLabel();
        cbxEstC = new javax.swing.JComboBox<>();
        cbxSexo = new javax.swing.JComboBox<>();
        jPanel4 = new javax.swing.JPanel();
        jLabel59 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jdFechaNac = new com.toedter.calendar.JDateChooser();
        id_empleado = new javax.swing.JTextField();

        jPanel1.setPreferredSize(new java.awt.Dimension(1024, 640));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        txtNombre1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Primer Nombre", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtNombre1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombre1txtNombre1KeyTyped(evt);
            }
        });

        txtNombre2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Segundo Nombre", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtNombre2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombre2txtNombre2ActionPerformed(evt);
            }
        });
        txtNombre2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombre2txtNombre2KeyTyped(evt);
            }
        });

        txtApellido1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Primer Apellido", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtApellido1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellido1txtApellido1ActionPerformed(evt);
            }
        });
        txtApellido1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellido1txtApellido1KeyTyped(evt);
            }
        });

        txtApellido2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Segundo Apellido", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtApellido2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellido2txtApellido2KeyTyped(evt);
            }
        });

        txtRtn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtRtn.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "RTN", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtRtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRtntxtRtnKeyTyped(evt);
            }
        });

        txtNacionalidad.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nacionalidad", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtNacionalidad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNacionalidadActionPerformed(evt);
            }
        });
        txtNacionalidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNacionalidadtxtNacionalidadKeyTyped(evt);
            }
        });

        txtDireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Barrio", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDirecciontxtDireccionActionPerformed(evt);
            }
        });
        txtDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDirecciontxtDireccionKeyTyped(evt);
            }
        });

        txt_RefeDireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Referencia de Domicilio", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txt_RefeDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_RefeDirecciontxt_RefeDireccionActionPerformed(evt);
            }
        });
        txt_RefeDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_RefeDirecciontxt_RefeDireccionKeyTyped(evt);
            }
        });

        txtCelular.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Celular", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtCelular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCelulartxtCelularActionPerformed(evt);
            }
        });
        txtCelular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCelulartxtCelularKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCelulartxtCelularKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCelulartxtCelularKeyTyped(evt);
            }
        });

        txt_FijoCel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "TÃ©lefono Fijo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txt_FijoCel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_FijoCeltxt_FijoCelActionPerformed(evt);
            }
        });
        txt_FijoCel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_FijoCeltxt_FijoCelKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_FijoCeltxt_FijoCelKeyTyped(evt);
            }
        });

        btn_editar.setBackground(new java.awt.Color(255, 0, 204));
        btn_editar.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_editar.setForeground(new java.awt.Color(51, 51, 51));
        btn_editar.setText("EDITAR");
        btn_editar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_editarbtn_crearMouseClicked(evt);
            }
        });
        btn_editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_editarbtn_crearActionPerformed(evt);
            }
        });

        txtDni.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDni.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DNI", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDnitxtDniKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDnitxtDniKeyTyped(evt);
            }
        });

        cbxAldea.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Aldea/Comunidad", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N

        cbxMuni.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Trojes", "DanlÃ­", "El ParaÃ­so", "Teupasenti", "MorocelÃ­", "YuscarÃ¡n", "Liure", "Soledad", "Texiguat", "Alauca", "GÃ¼inope", "San Lucas", "OropolÃ­", "San Antonio de Flores", "San MatÃ­as", "Vado Ancho", "Jacaleapa", "Potrerillos", "Yauyupe" }));
        cbxMuni.setSelectedIndex(-1);
        cbxMuni.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Municipio", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        cbxMuni.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxMunicbxMuniItemStateChanged(evt);
            }
        });

        txtSalario.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Salario", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtSalario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSalarioKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial Black", 2, 12)); // NOI18N
        jLabel1.setText("DirecciÃ³n de Domicilio Exacta");

        jButton1.setBackground(new java.awt.Color(255, 0, 204));
        jButton1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton1.setText("ATRÃS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        cbxEstC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Soltero", "Casado", "Viudo" }));
        cbxEstC.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Estado Civil", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 1, 12))); // NOI18N

        cbxSexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Femenino", "Masculino" }));
        cbxSexo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sexo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 1, 12))); // NOI18N

        jPanel4.setBackground(new java.awt.Color(255, 102, 102));

        jLabel59.setFont(new java.awt.Font("Arial Black", 3, 36)); // NOI18N
        jLabel59.setText("Datos del Personal");

        jLabel10.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel10.setText("9801-4550/3308-9197");

        jLabel11.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel11.setText("Trojes, El ParaÃ­so");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel59, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(265, 265, 265))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGap(371, 371, 371))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(393, 393, 393))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel59, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel11)
                .addGap(31, 31, 31))
        );

        jdFechaNac.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Fecha de nacimiento:", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N

        id_empleado.setEditable(false);
        id_empleado.setBackground(new java.awt.Color(255, 255, 255));
        id_empleado.setForeground(new java.awt.Color(255, 255, 255));
        id_empleado.setBorder(null);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(326, 326, 326))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jButton1)
                .addGap(307, 307, 307)
                .addComponent(btn_editar)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtDni)
                                    .addComponent(cbxEstC, 0, 427, Short.MAX_VALUE))
                                .addGap(33, 33, 33)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtRtn)
                                    .addComponent(txtNacionalidad)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(txt_RefeDireccion)
                                    .addComponent(txtDireccion, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(40, 40, 40)
                                        .addComponent(cbxMuni, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(cbxAldea, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(31, 31, 31)
                                        .addComponent(txtCelular)
                                        .addGap(18, 18, 18)
                                        .addComponent(txt_FijoCel, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(244, 244, 244)))
                        .addGap(75, 75, 75))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lbl_id, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(txtNombre1, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtNombre2, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jdFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(3, 3, 3)
                                        .addComponent(txtApellido1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtApellido2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                        .addGap(41, 41, 41)
                                        .addComponent(cbxSexo, javax.swing.GroupLayout.PREFERRED_SIZE, 393, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addGap(0, 136, Short.MAX_VALUE))))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(id_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_id, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(id_empleado, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApellido1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApellido2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(cbxSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jdFechaNac, javax.swing.GroupLayout.DEFAULT_SIZE, 68, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtRtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cbxEstC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(jLabel1)
                .addGap(15, 15, 15)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbxAldea, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cbxMuni, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDireccion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_RefeDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_FijoCel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_editar)
                    .addComponent(jButton1))
                .addGap(11, 11, 11))
        );

        lbl_id.setVisible(false);

        jScrollPane1.setViewportView(jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombre1txtNombre1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombre1txtNombre1KeyTyped
        // validaciÃ³n en el campo de nombre para que acepte solo letra y letras tildades, se utiliza el codigo ASCII para las letras tildades
        char c = evt.getKeyChar();
        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && ((int) evt.getKeyChar() <= 160) || txtNombre1.getText().length() >= 20)
        evt.consume();
    }//GEN-LAST:event_txtNombre1txtNombre1KeyTyped

    private void txtNombre2txtNombre2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombre2txtNombre2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombre2txtNombre2ActionPerformed

    private void txtNombre2txtNombre2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombre2txtNombre2KeyTyped
        // validaciÃ³n en el campo de nombre para que acepte solo letra y letras tildades, se utiliza el codigo ASCII para las letras tildades
        char c = evt.getKeyChar();
        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && ((int) evt.getKeyChar() <= 160) || txtNombre2.getText().length() >= 20)
        evt.consume();
    }//GEN-LAST:event_txtNombre2txtNombre2KeyTyped

    private void txtApellido1txtApellido1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellido1txtApellido1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellido1txtApellido1ActionPerformed

    private void txtApellido1txtApellido1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellido1txtApellido1KeyTyped
        // validaciÃ³n en el campo de nombre para que acepte solo letra y letras tildades, se utiliza el codigo ASCII para las letras tildades
        char c = evt.getKeyChar();
        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && ((int) evt.getKeyChar() <= 160) || txtApellido1.getText().length() >= 20)
        evt.consume();
    }//GEN-LAST:event_txtApellido1txtApellido1KeyTyped

    private void txtApellido2txtApellido2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellido2txtApellido2KeyTyped
        // validaciÃ³n en el campo de nombre para que acepte solo letra y letras tildades, se utiliza el codigo ASCII para las letras tildades
        char c = evt.getKeyChar();
        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && ((int) evt.getKeyChar() <= 160) || txtApellido2.getText().length() >= 20)
        evt.consume();
    }//GEN-LAST:event_txtApellido2txtApellido2KeyTyped

    private void txtRtntxtRtnKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRtntxtRtnKeyTyped
        char c = evt.getKeyChar();

        String texto = txtRtn.getText();

        // Verificar si se ingresÃ³ un dÃ­gito y el nÃºmero de caracteres no excede el formato esperado
        if (Character.isDigit(c) && texto.length() < 16) {
            if (texto.length() == 4 || texto.length() == 9) {
                txtRtn.setText(texto + "-");
            }
        } else {
            evt.consume();  // Ignorar el carÃ¡cter ingresado si no cumple con el formato esperado
        }
    }//GEN-LAST:event_txtRtntxtRtnKeyTyped

    private void txtNacionalidadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNacionalidadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNacionalidadActionPerformed

    private void txtNacionalidadtxtNacionalidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNacionalidadtxtNacionalidadKeyTyped
        // validaciÃ³n en el campo de nombre para que acepte solo letra y letras tildades, se utiliza el codigo ASCII para las letras tildades
        char c = evt.getKeyChar();
        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && ((int) evt.getKeyChar() <= 160) || txtNacionalidad.getText().length() >= 20)
        evt.consume();
    }//GEN-LAST:event_txtNacionalidadtxtNacionalidadKeyTyped

    private void txtDirecciontxtDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDirecciontxtDireccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDirecciontxtDireccionActionPerformed

    private void txtDirecciontxtDireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDirecciontxtDireccionKeyTyped
        char c = evt.getKeyChar();
        String text = txtDireccion.getText();

        // Verificar si el carÃ¡cter es un espacio y si es el primer carÃ¡cter en el campo
        if (c == ' ' && text.length() == 0) {
            evt.consume();
            return;
        }

        // Verificar si el carÃ¡cter es una letra sin tilde, letra con tilde, nÃºmero o punto
        if (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '.' || ((int) c <= 160))) {
            evt.consume();
            return;
        }

        // Verificar si la longitud del texto es mayor o igual a 20
        if (text.length() >= 50) {
            evt.consume();
            return;
        }
    }//GEN-LAST:event_txtDirecciontxtDireccionKeyTyped

    private void txt_RefeDirecciontxt_RefeDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_RefeDirecciontxt_RefeDireccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_RefeDirecciontxt_RefeDireccionActionPerformed

    private void txt_RefeDirecciontxt_RefeDireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_RefeDirecciontxt_RefeDireccionKeyTyped
        char c = evt.getKeyChar();
        String text = txt_RefeDireccion.getText();

        // Verificar si el carÃ¡cter es un espacio y si es el primer carÃ¡cter en el campo
        if (c == ' ' && text.length() == 0) {
            evt.consume();
            return;
        }

        // Verificar si el carÃ¡cter es una letra sin tilde, letra con tilde, nÃºmero o punto
        if (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '.' || ((int) c <= 160))) {
            evt.consume();
            return;
        }

        // Verificar si la longitud del texto es mayor o igual a 20
        if (text.length() >= 200) {
            evt.consume();
            return;
        }
    }//GEN-LAST:event_txt_RefeDirecciontxt_RefeDireccionKeyTyped

    private void txtCelulartxtCelularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCelulartxtCelularActionPerformed

    }//GEN-LAST:event_txtCelulartxtCelularActionPerformed

    private void txtCelulartxtCelularKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelulartxtCelularKeyPressed

    }//GEN-LAST:event_txtCelulartxtCelularKeyPressed

    private void txtCelulartxtCelularKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelulartxtCelularKeyReleased
        String texto = txtCelular.getText().trim();

        if (texto.startsWith("9") || texto.startsWith("8") || texto.startsWith("3")) {
            txtCelular.setBackground(Color.green);
        } else {
            // El texto no cumple con la validaciÃ³n
            JOptionPane.showMessageDialog(this, "El nÃºmero de celular debe comenzar con 9, 8 o 3", "Error", JOptionPane.ERROR_MESSAGE);
            txtCelular.setBackground(Color.red);
        }
    }//GEN-LAST:event_txtCelulartxtCelularKeyReleased

    private void txtCelulartxtCelularKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelulartxtCelularKeyTyped
        String input = txtCelular.getText();
        char c = evt.getKeyChar();
        String texto = txtCelular.getText();

        // Verificar si se ingresÃ³ un dÃ­gito y el nÃºmero de caracteres no excede el formato esperado
        if (Character.isDigit(c) && texto.length() < 9) {
            // Formato: XXXX-XXXX (4 dÃ­gitos seguidos de un guion y otros 4 dÃ­gitos)
            if (texto.length() == 4) {
                txtCelular.setText(texto + "-");
            }
        } else {
            evt.consume();  // Ignorar el carÃ¡cter ingresado si no cumple con el formato esperado
        }
    }//GEN-LAST:event_txtCelulartxtCelularKeyTyped

    private void txt_FijoCeltxt_FijoCelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_FijoCeltxt_FijoCelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_FijoCeltxt_FijoCelActionPerformed

    private void txt_FijoCeltxt_FijoCelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_FijoCeltxt_FijoCelKeyReleased
        String texto = txt_FijoCel.getText().trim();

        if (texto.startsWith("2")) {
            txt_FijoCel.setBackground(Color.green);
        } else {
            // El texto no cumple con la validaciÃ³n
            JOptionPane.showMessageDialog(this, "El nÃºmero de telÃ©fono fijo debe iniciar con 2", "Error", JOptionPane.ERROR_MESSAGE);
            txt_FijoCel.setBackground(Color.red);
        }
    }//GEN-LAST:event_txt_FijoCeltxt_FijoCelKeyReleased

    private void txt_FijoCeltxt_FijoCelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_FijoCeltxt_FijoCelKeyTyped
        char c = evt.getKeyChar();
        String texto = txt_FijoCel.getText();

        // Verificar si se ingresÃ³ un dÃ­gito y el nÃºmero de caracteres no excede el formato esperado
        if (Character.isDigit(c) && texto.length() < 9) {
            // Formato: XXXX-XXXX (4 dÃ­gitos seguidos de un guion y otros 4 dÃ­gitos)
            if (texto.length() == 4) {
                txt_FijoCel.setText(texto + "-");
            }
        } else {
            evt.consume();  // Ignorar el carÃ¡cter ingresado si no cumple con el formato esperado
        }
    }//GEN-LAST:event_txt_FijoCeltxt_FijoCelKeyTyped

    private void btn_editarbtn_crearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_editarbtn_crearMouseClicked
        // PARA VALIDAR

        String primerNombre = txtNombre1.getText().trim();
        String primerApellido = txtApellido1.getText().trim();
        String nacionalidad = txtNacionalidad.getText().trim();
        String direccion = txtDireccion.getText().trim();
        String celular = txtCelular.getText().trim();

        String salario = txtSalario.getText().trim();
        String dni = txtDni.getText().trim();
        String rtn = txtRtn.getText().trim();

        if (primerNombre.isEmpty() || primerApellido.isEmpty() || nacionalidad.isEmpty() || direccion.isEmpty()
            || celular.isEmpty() || salario.isEmpty() || dni.isEmpty()
            || rtn.isEmpty() || jdFechaNac.getDate() == null) {
            // El campo estÃ¡ vacÃ­o, muestra un mensaje de error
            JOptionPane.showMessageDialog(this, "Llene todos los espacios necesarios", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "Registro guardado");

            /*  Ver_Empleado.nombre1.setText(txtNombre1.getText());
            Ver_Empleado.nombre2.setText(txtNombre2.getText());
            Ver_Empleado.apellido1.setText(txtApellido1.getText());
            Ver_Empleado.apellido2.setText(txtApellido2.getText());*/
        }
        // VALIDACIÃN PARA EL NÃMERO DE DNI y RTN
        // Verificar el formato del RTN
        if (!rtn.matches("^[0-9]{4}-[0-9]{4}-[0-9]{6}$")) {
            JOptionPane.showMessageDialog(this, "Ingrese un formato de RTN correcto", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Obtener los valores de departamento, municipio y aÃ±o
            String depto = rtn.substring(0, 2);
            String municipio = rtn.substring(2, 4);
            String anio = rtn.substring(5, 9);
            String correlativo = rtn.substring(10);

            // Convertir todos los valores a nÃºmeros
            int deptoN = Integer.parseInt(depto);
            int municipioN = Integer.parseInt(municipio);
            int anioN = Integer.parseInt(anio);
            int correlativoN = Integer.parseInt(correlativo);

            // Validar los rangos para departamento y municipio
            boolean departamentoValido = false;
            boolean municipioValido = false;

            if (deptoN == 7 && municipioN >= 1 && municipioN <= 5) {
                departamentoValido = true;
                municipioValido = true;
            } else if ((deptoN >= 1 && deptoN <= 6) || (deptoN >= 8 && deptoN <= 18)) {
                departamentoValido = true;
                if (deptoN == 1 && municipioN >= 1 && municipioN <= 8) {
                    municipioValido = true;
                } else if (deptoN == 2 && municipioN >= 1 && municipioN <= 10) {
                    municipioValido = true;
                } else if (deptoN == 3 && municipioN >= 1 && municipioN <= 21) {
                    municipioValido = true;
                } else if (deptoN == 4 && municipioN >= 1 && municipioN <= 23) {
                    municipioValido = true;
                } else if (deptoN == 5 && municipioN >= 1 && municipioN <= 12) {
                    municipioValido = true;
                } else if (deptoN == 6 && municipioN >= 1 && municipioN <= 16) {
                    municipioValido = true;
                } else if (deptoN == 8 && municipioN >= 1 && municipioN <= 28) {
                    municipioValido = true;
                } else if (deptoN == 9 && municipioN >= 1 && municipioN <= 6) {
                    municipioValido = true;
                } else if (deptoN == 10 && municipioN >= 1 && municipioN <= 17) {
                    municipioValido = true;
                } else if (deptoN == 11 && municipioN >= 1 && municipioN <= 4) {
                    municipioValido = true;
                } else if (deptoN == 12 && municipioN >= 1 && municipioN <= 19) {
                    municipioValido = true;
                } else if (deptoN == 13 && municipioN >= 1 && municipioN <= 28) {
                    municipioValido = true;
                } else if (deptoN == 14 && municipioN >= 1 && municipioN <= 16) {
                    municipioValido = true;
                } else if (deptoN == 15 && municipioN >= 1 && municipioN <= 23) {
                    municipioValido = true;
                } else if (deptoN == 16 && municipioN >= 1 && municipioN <= 28) {
                    municipioValido = true;
                } else if (deptoN == 17 && municipioN >= 1 && municipioN <= 9) {
                    municipioValido = true;
                } else if (deptoN == 18 && municipioN >= 1 && municipioN <= 11) {
                    municipioValido = true;
                }
            }

            boolean anioValido = anioN >= 1990 && anioN <= 2005;
            boolean correlativoValido = correlativoN >= 1 && correlativoN <= 99999;

            if (!departamentoValido || !municipioValido || !anioValido || !correlativoValido) {
                JOptionPane.showMessageDialog(this, "Ingrese un RTN vÃ¡lido", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // El DNI es vÃ¡lido, realizar la acciÃ³n deseada aquÃ­
            }
        }

        //RTN
        // Verificar el formato del DNI
        if (!dni.matches("^[0-9]{4}-[0-9]{4}-[0-9]{5}$")) {
            JOptionPane.showMessageDialog(this, "Ingrese un formato de DNI correcto", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Obtener los valores de departamento, municipio y aÃ±o
            String depto = dni.substring(0, 2);
            String municipio = dni.substring(2, 4);
            String anio = dni.substring(5, 9);
            String correlativo = dni.substring(10);

            // Convertir todos los valores a nÃºmeros
            int deptoN = Integer.parseInt(depto);
            int municipioN = Integer.parseInt(municipio);
            int anioN = Integer.parseInt(anio);
            int correlativoN = Integer.parseInt(correlativo);

            // Validar los rangos para departamento y municipio
            boolean departamentoValido = false;
            boolean municipioValido = false;

            if (deptoN == 7 && municipioN >= 1 && municipioN <= 5) {
                departamentoValido = true;
                municipioValido = true;
            } else if ((deptoN >= 1 && deptoN <= 6) || (deptoN >= 8 && deptoN <= 18)) {
                departamentoValido = true;
                if (deptoN == 1 && municipioN >= 1 && municipioN <= 8) {
                    municipioValido = true;
                } else if (deptoN == 2 && municipioN >= 1 && municipioN <= 10) {
                    municipioValido = true;
                } else if (deptoN == 3 && municipioN >= 1 && municipioN <= 21) {
                    municipioValido = true;
                } else if (deptoN == 4 && municipioN >= 1 && municipioN <= 23) {
                    municipioValido = true;
                } else if (deptoN == 5 && municipioN >= 1 && municipioN <= 12) {
                    municipioValido = true;
                } else if (deptoN == 6 && municipioN >= 1 && municipioN <= 16) {
                    municipioValido = true;
                } else if (deptoN == 8 && municipioN >= 1 && municipioN <= 28) {
                    municipioValido = true;
                } else if (deptoN == 9 && municipioN >= 1 && municipioN <= 6) {
                    municipioValido = true;
                } else if (deptoN == 10 && municipioN >= 1 && municipioN <= 17) {
                    municipioValido = true;
                } else if (deptoN == 11 && municipioN >= 1 && municipioN <= 4) {
                    municipioValido = true;
                } else if (deptoN == 12 && municipioN >= 1 && municipioN <= 19) {
                    municipioValido = true;
                } else if (deptoN == 13 && municipioN >= 1 && municipioN <= 28) {
                    municipioValido = true;
                } else if (deptoN == 14 && municipioN >= 1 && municipioN <= 16) {
                    municipioValido = true;
                } else if (deptoN == 15 && municipioN >= 1 && municipioN <= 23) {
                    municipioValido = true;
                } else if (deptoN == 16 && municipioN >= 1 && municipioN <= 28) {
                    municipioValido = true;
                } else if (deptoN == 17 && municipioN >= 1 && municipioN <= 9) {
                    municipioValido = true;
                } else if (deptoN == 18 && municipioN >= 1 && municipioN <= 11) {
                    municipioValido = true;
                }
            }

            boolean anioValido = anioN >= 1990 && anioN <= 2005;
            boolean correlativoValido = correlativoN >= 1 && correlativoN <= 99999;

            if (!departamentoValido || !municipioValido || !anioValido || !correlativoValido) {
                JOptionPane.showMessageDialog(this, "Ingrese un DNI vÃ¡lido", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // El DNI es vÃ¡lido, enviar a la base de Datos
            }
        }

        /*
        // PARA PASAR LA INFORMACIÃN A LA VENTANA DE VER CADA EMPLEADO
        // Tomar la fecha del JDateChooser y colocarla en el TextField para la fecha de Nacimiento
        String dia = Integer.toString(jdFechaNac.getCalendar().get(Calendar.DAY_OF_MONTH));
        String mes = Integer.toString(jdFechaNac.getCalendar().get(Calendar.MONTH) + 1);
        String year = Integer.toString(jdFechaNac.getCalendar().get(Calendar.YEAR));
        Ver_Empleado.fechaNac.setText(year + "-" + mes + "-" + dia);

        Ver_Empleado.nacionalidad.setText(txtNacionalidad.getText());
        Ver_Empleado.direccion.setText(txtDireccion.getText());
        Ver_Empleado.refDomicilio.setText(txt_RefeDireccion.getText());
        Ver_Empleado.celular.setText(txtCelular.getText());
        Ver_Empleado.fijoDomicilio.setText(txt_FijoCel.getText());
        ;

        */
        int sal = Integer.parseInt(salario);

        if (sal > 15000 || sal < 1000) {
            JOptionPane.showMessageDialog(this, "El salario debe ser mayor de 1000 y menor de 5 cifras", "Error", JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_btn_editarbtn_crearMouseClicked

    private void btn_editarbtn_crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_editarbtn_crearActionPerformed

        String nombre1 = txtNombre1.getText();
        String nombre2 = txtNombre2.getText();
        String apellido1 = txtApellido1.getText();
        String apellido2 = txtApellido2.getText();

        java.util.Date fecha_na = jdFechaNac.getDate();
        String sexo = (String) cbxSexo.getSelectedItem();
        String barrio = txtDireccion.getText();
        String municipioD = (String) cbxMuni.getSelectedItem();
        String aldea = (String) cbxAldea.getSelectedItem();
        String refe_direccion = txt_RefeDireccion.getText();
        String celular = txtCelular.getText();
        String fijo_cel = txt_FijoCel.getText();
        String dni = txtDni.getText();
        String rtn = txtRtn.getText();
        String estado_civil = (String) cbxEstC.getSelectedItem();
        String nacionalidad = txtNacionalidad.getText();
        String salario = txtSalario.getText();

        if(cbxSexo.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Selecione un genero", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if(cbxEstC.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Selecione un estado civil", "Error", JOptionPane.ERROR_MESSAGE);
        }

        if (nombre1.isEmpty() || apellido1.isEmpty() || fecha_na.equals(null) || barrio.isEmpty()
            || celular.isEmpty() || dni.isEmpty() || rtn.isEmpty() || nacionalidad.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Llene todos los espacios necesarios", "Error", JOptionPane.ERROR_MESSAGE);

            // Verifica los campos de texto y resalta el primero vacÃ­o
            JTextField[] textFields = {txtNombre1, txtApellido1, txtDireccion, txtCelular, txtDni, txtRtn,
                txtNacionalidad, txtSalario};
            boolean foundEmpty = false;

            for (JTextField textField : textFields) {
                if (textField.getText().isEmpty()) {
                    textField.setBackground(Color.RED); // Establece el color de resaltado en rojo
                } else {
                    textField.setBackground(UIManager.getColor("TextField.background")); // Restaura el color por defecto
                }
            }

            // Verifica los JDateChooser y resalta el primero vacÃ­o
            JDateChooser[] dateChoosers = {jdFechaNac};

            for (JDateChooser dateChooser : dateChoosers) {
                if (dateChooser.getDate() == null) {
                    // Cambia el color del borde a rojo para resaltarlo
                    dateChooser.setBorder(BorderFactory.createLineBorder(Color.RED));
                    foundEmpty = true;
                } else {
                    // Restaura el borde por defecto
                    dateChooser.setBorder(BorderFactory.createLineBorder(UIManager.getColor("TextField.border")));
                }
            }

            // VALIDACIÃN PARA EL NÃMERO DE DNI y RTN
            // Verificar el formato del RTN
            if (!rtn.matches("^[0-9]{4}-[0-9]{4}-[0-9]{6}$")) {
                JOptionPane.showMessageDialog(this, "Ingrese un formato de RTN correcto", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // Obtener los valores de departamento, municipio y aÃ±o
                String depto = rtn.substring(0, 2);
                String municipio = rtn.substring(2, 4);
                String anio = rtn.substring(5, 9);
                String correlativo = rtn.substring(10);

                // Convertir todos los valores a nÃºmeros
                int deptoN = Integer.parseInt(depto);
                int municipioN = Integer.parseInt(municipio);
                int anioN = Integer.parseInt(anio);
                int correlativoN = Integer.parseInt(correlativo);

                // Validar los rangos para departamento y municipio
                boolean departamentoValido = false;
                boolean municipioValido = false;

                if (deptoN == 7 && municipioN >= 1 && municipioN <= 5) {
                    departamentoValido = true;
                    municipioValido = true;
                } else if ((deptoN >= 1 && deptoN <= 6) || (deptoN >= 8 && deptoN <= 18)) {
                    departamentoValido = true;
                    if (deptoN == 1 && municipioN >= 1 && municipioN <= 8) {
                        municipioValido = true;
                    } else if (deptoN == 2 && municipioN >= 1 && municipioN <= 10) {
                        municipioValido = true;
                    } else if (deptoN == 3 && municipioN >= 1 && municipioN <= 21) {
                        municipioValido = true;
                    } else if (deptoN == 4 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 5 && municipioN >= 1 && municipioN <= 12) {
                        municipioValido = true;
                    } else if (deptoN == 6 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 8 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 9 && municipioN >= 1 && municipioN <= 6) {
                        municipioValido = true;
                    } else if (deptoN == 10 && municipioN >= 1 && municipioN <= 17) {
                        municipioValido = true;
                    } else if (deptoN == 11 && municipioN >= 1 && municipioN <= 4) {
                        municipioValido = true;
                    } else if (deptoN == 12 && municipioN >= 1 && municipioN <= 19) {
                        municipioValido = true;
                    } else if (deptoN == 13 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 14 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 15 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 16 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 17 && municipioN >= 1 && municipioN <= 9) {
                        municipioValido = true;
                    } else if (deptoN == 18 && municipioN >= 1 && municipioN <= 11) {
                        municipioValido = true;
                    }
                }

                boolean anioValido = anioN >= 1960 && anioN <= 2005;
                boolean correlativoValido = correlativoN >= 1 && correlativoN <= 99999;

                if (!departamentoValido || !municipioValido || !anioValido || !correlativoValido) {
                    JOptionPane.showMessageDialog(this, "Ingrese un RTN vÃ¡lido", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    // El DNI es vÃ¡lido, realizar la acciÃ³n deseada aquÃ­
                }
            }

            //RTN
            // Verificar el formato del DNI
            if (!dni.matches("^[0-9]{4}-[0-9]{4}-[0-9]{5}$")) {
                JOptionPane.showMessageDialog(this, "Ingrese un formato de DNI correcto", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // Obtener los valores de departamento, municipio y aÃ±o
                String depto = dni.substring(0, 2);
                String municipio = dni.substring(2, 4);
                String anio = dni.substring(5, 9);
                String correlativo = dni.substring(10);

                // Convertir todos los valores a nÃºmeros
                int deptoN = Integer.parseInt(depto);
                int municipioN = Integer.parseInt(municipio);
                int anioN = Integer.parseInt(anio);
                int correlativoN = Integer.parseInt(correlativo);

                // Validar los rangos para departamento y municipio
                boolean departamentoValido = false;
                boolean municipioValido = false;

                if (deptoN == 7 && municipioN >= 1 && municipioN <= 5) {
                    departamentoValido = true;
                    municipioValido = true;
                } else if ((deptoN >= 1 && deptoN <= 6) || (deptoN >= 8 && deptoN <= 18)) {
                    departamentoValido = true;
                    if (deptoN == 1 && municipioN >= 1 && municipioN <= 8) {
                        municipioValido = true;
                    } else if (deptoN == 2 && municipioN >= 1 && municipioN <= 10) {
                        municipioValido = true;
                    } else if (deptoN == 3 && municipioN >= 1 && municipioN <= 21) {
                        municipioValido = true;
                    } else if (deptoN == 4 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 5 && municipioN >= 1 && municipioN <= 12) {
                        municipioValido = true;
                    } else if (deptoN == 6 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 8 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 9 && municipioN >= 1 && municipioN <= 6) {
                        municipioValido = true;
                    } else if (deptoN == 10 && municipioN >= 1 && municipioN <= 17) {
                        municipioValido = true;
                    } else if (deptoN == 11 && municipioN >= 1 && municipioN <= 4) {
                        municipioValido = true;
                    } else if (deptoN == 12 && municipioN >= 1 && municipioN <= 19) {
                        municipioValido = true;
                    } else if (deptoN == 13 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 14 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 15 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 16 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 17 && municipioN >= 1 && municipioN <= 9) {
                        municipioValido = true;
                    } else if (deptoN == 18 && municipioN >= 1 && municipioN <= 11) {
                        municipioValido = true;
                    }
                }

                boolean anioValido = anioN >= 1960 && anioN <= 2005;
                boolean correlativoValido = correlativoN >= 1 && correlativoN <= 99999;

                if (!departamentoValido || !municipioValido || !anioValido || !correlativoValido) {
                    JOptionPane.showMessageDialog(this, "Ingrese un DNI vÃ¡lido", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    // El DNI es vÃ¡lido, enviar a la base de Datos
                }
            }

            if (!salario.isEmpty()) {
                try {
                    int sal = Integer.parseInt(salario);

                    if (sal > 99999 || sal < 1000) {
                        JOptionPane.showMessageDialog(this, "El salario debe ser mayor de 1000 y menor de 5 cifras", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    // Manejar el caso en el que 'salario' no es un nÃºmero vÃ¡lido
                }
            }

        } else {

           try {
    Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
    Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=GlendaDB;encrypt=true;trustServerCertificate=true;", "sa", "123456789");

    PreparedStatement ps = conn.prepareStatement("UPDATE Empleado SET nombre1=?, nombre2=?, apellido1=?, apellido2=?, fecha_nacimiento=?, sexo=?,"
            + "dni=?, rtn=?, estado_civil=?, nacionalidad=?, barrio=?, municipio=?, aldea=?, referenciaDomicilio=?, celular=?, fijo=?, salario=? WHERE id=?");

    ps.setString(1, nombre1);
    ps.setString(2, nombre2);
    ps.setString(3, apellido1);
    ps.setString(4, apellido2);
    ps.setDate(5, new java.sql.Date(fecha_na.getTime()));
    ps.setString(6, sexo);
    ps.setString(7, dni);
    ps.setString(8, rtn);
    ps.setString(9, estado_civil);
    ps.setString(10, nacionalidad);
    ps.setString(11, barrio);
    ps.setString(12, municipioD);
    ps.setString(13, aldea);
    ps.setString(14, refe_direccion);
    ps.setString(15, celular);
    ps.setString(16, fijo_cel);
    ps.setString(17, salario);

    // Establece el valor de la clave primaria
    int numeracion = Integer.parseInt(id_empleado.getText());
    ps.setInt(18, numeracion);

    int rowsUpdated = ps.executeUpdate();

    if (rowsUpdated > 0) {
        JOptionPane.showMessageDialog(null, "Empleado modificado exitosamente");

        Listado_Empleados abrir = new Listado_Empleados();
        abrir.setVisible(true);
        //this.dispose();
    } else {
        JOptionPane.showMessageDialog(null, "No se encontrÃ³ el empleado para modificar");
    }

} catch (SQLException e) {
    JOptionPane.showMessageDialog(null, "Error SQL: " + e.getMessage());
    e.printStackTrace();
} catch (ClassNotFoundException ex) {
    JOptionPane.showMessageDialog(null, "Error de clase: " + ex.getMessage());
    ex.printStackTrace();
}}
    }//GEN-LAST:event_btn_editarbtn_crearActionPerformed

    private void txtDnitxtDniKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDnitxtDniKeyReleased

    }//GEN-LAST:event_txtDnitxtDniKeyReleased

    private void txtDnitxtDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDnitxtDniKeyTyped
        char c = evt.getKeyChar();

        String texto = txtDni.getText();

        // Verificar si se ingresÃ³ un dÃ­gito y el nÃºmero de caracteres no excede el formato esperado
        if (Character.isDigit(c) && texto.length() < 15) {
            if (texto.length() == 4 || texto.length() == 9) {
                txtDni.setText(texto + "-");
            }
        } else {
            evt.consume();  // Ignorar el carÃ¡cter ingresado si no cumple con el formato esperado
        }
    }//GEN-LAST:event_txtDnitxtDniKeyTyped

    private void cbxMunicbxMuniItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxMunicbxMuniItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            // Obtener el Ã­tem seleccionado en comboBox1
            String seleccion = cbxMuni.getSelectedItem().toString();

            // Limpiar comboBox2
            cbxAldea.removeAllItems();

            /*
            Trojes
            DanlÃ­
            El ParaÃ­so
            Teupasenti
            MorocelÃ­
            YuscarÃ¡n
            Liure
            Soledad
            Texiguat
            Alauca
            GÃ¼inope
            San Lucas
            OropolÃ­
            San Antonio de Flores
            San MatÃ­as
            Vado Ancho
            Jacaleapa
            Potrerillos
            Yauyupe

            */
            // Llenar comboBox2 en funciÃ³n de la selecciÃ³n en comboBox1
            if (seleccion.equals("Trojes")) {
                cbxAldea.addItem("Trojes");
                cbxAldea.addItem("Arenales");
                cbxAldea.addItem("Capire");
                cbxAldea.addItem("Cifuentes");
                cbxAldea.addItem("El Guineo");
                cbxAldea.addItem("TalpachÃ­");
                cbxAldea.addItem("Yamales");
            } else if (seleccion.equals("DanlÃ­")) {
                cbxAldea.addItem("DanlÃ­");
                cbxAldea.addItem("Agua FrÃ­a");
                cbxAldea.addItem("ApalÃ­");
                cbxAldea.addItem("AraulÃ­");
                cbxAldea.addItem("BaÃ±aderos");
                cbxAldea.addItem("Buena Esperanza de Azabache");
                cbxAldea.addItem("Chirinos");
                cbxAldea.addItem("El Arenal");
                cbxAldea.addItem("El Barro");
                cbxAldea.addItem("El Chichicaste");
                cbxAldea.addItem("El Maguelar");
                cbxAldea.addItem("El Matasano");
                cbxAldea.addItem("El Obraje");
                cbxAldea.addItem("El Olingo o El Porvenir");
                cbxAldea.addItem("El Pataste");
                cbxAldea.addItem("El Pescadero");
                cbxAldea.addItem("El Porvenir");
                cbxAldea.addItem("El Pozo Bendito");
                cbxAldea.addItem("El TablÃ³n");
                cbxAldea.addItem("El Zamorano");
                cbxAldea.addItem("El Zapotillo");
                cbxAldea.addItem("El Zarzal");
                cbxAldea.addItem("Gualiqueme");
                cbxAldea.addItem("Jutiapa");
                cbxAldea.addItem("La Lima");
                cbxAldea.addItem("La Lodosa");
                cbxAldea.addItem("La Trinidad o Sartenejas");
                cbxAldea.addItem("Las Animas");
                cbxAldea.addItem("Linaca");
                cbxAldea.addItem("Palmillas");
                cbxAldea.addItem("Quebrada Arriba u OculÃ­");
                cbxAldea.addItem("Quebrada Larga");
                cbxAldea.addItem("San Diego");
                cbxAldea.addItem("San JuliÃ¡n");
                cbxAldea.addItem("San Marcos Abajo");
                cbxAldea.addItem("Santa MarÃ­a");
                cbxAldea.addItem("Villa Santa");
            } else if (seleccion.equals("El ParaÃ­so")) {
                cbxAldea.addItem("El ParaÃ­so");
                cbxAldea.addItem("CuyalÃ­");
                cbxAldea.addItem("Dificultades");
                cbxAldea.addItem("Granadillos");
                cbxAldea.addItem("La UniÃ³n");
                cbxAldea.addItem("Las CaÃ±as");
                cbxAldea.addItem("Las Flores");
                cbxAldea.addItem("Las Manos");
                cbxAldea.addItem("Las Selvas");
                cbxAldea.addItem("Los Terrones");
                cbxAldea.addItem("Los Volcanes");
                cbxAldea.addItem("San Antonio de Conchagua");
                cbxAldea.addItem("Santa Cruz");
            } else if (seleccion.equals("Teupasenti")) {
                cbxAldea.addItem("Teupasenti");
                cbxAldea.addItem("Agua FrÃ­a");
                cbxAldea.addItem("BaÃ±aderos");
                cbxAldea.addItem("El CantÃ³n");
                cbxAldea.addItem("El Corralito");
                cbxAldea.addItem("El ChelÃ³n No. 1");
                cbxAldea.addItem("El Chilito");
                cbxAldea.addItem("El Encino");
                cbxAldea.addItem("El Jute");
                cbxAldea.addItem("El Ocotal");
                cbxAldea.addItem("El Rito N.Âº 1");
                cbxAldea.addItem("El Rito N.Âº 2");
                cbxAldea.addItem("El Rito del Esquillal");
                cbxAldea.addItem("El Rodeo");
                cbxAldea.addItem("El Suyatal");
                cbxAldea.addItem("Escobas Amarillas");
                cbxAldea.addItem("La Aguja");
                cbxAldea.addItem("La Cebadilla");
                cbxAldea.addItem("La Comunidad");
                cbxAldea.addItem("La Granja");
                cbxAldea.addItem("La Laguna N.Âº 1");
                cbxAldea.addItem("La Laguna N.Âº 2");
                cbxAldea.addItem("La Zacatera");
                cbxAldea.addItem("Las Cortinas");
                cbxAldea.addItem("Las Delicias");
                cbxAldea.addItem("Las Flores");
                cbxAldea.addItem("Las Uvas");
                cbxAldea.addItem("Los Plancitos N.Âº 1");
                cbxAldea.addItem("Paso Hondo");
                cbxAldea.addItem("PedrÃ­os");
                cbxAldea.addItem("PeÃ±a Blanca");
                cbxAldea.addItem("Potrerillos");
                cbxAldea.addItem("Quebrada del Zapotillo");
                cbxAldea.addItem("Saladino N.Âº 1");
                cbxAldea.addItem("San Isidro");
                cbxAldea.addItem("San JosÃ© del Potrero");
                cbxAldea.addItem("Santa Cruz");
                cbxAldea.addItem("Santa Rosa N.Âº 1");
                cbxAldea.addItem("Santa Rosa N.Âº 2");
            } else if (seleccion.equals("MorocelÃ­")) {
                cbxAldea.addItem("MorocelÃ­");
                cbxAldea.addItem("Buena Vista");
                cbxAldea.addItem("El Chile o Quebrada Grande");
                cbxAldea.addItem("El Chilito");
                cbxAldea.addItem("El Llano");
                cbxAldea.addItem("El Plan");
                cbxAldea.addItem("El Retiro");
                cbxAldea.addItem("El Suyate");
                cbxAldea.addItem("Guadalajara");
                cbxAldea.addItem("Hoya Grande");
                cbxAldea.addItem("Las Champas");
                cbxAldea.addItem("Los Limones");
                cbxAldea.addItem("Los LiquidÃ¡mbos");
                cbxAldea.addItem("Los Pozos");
                cbxAldea.addItem("Mata de PlÃ¡tano");
                cbxAldea.addItem("Valle Arriba");
            } else if (seleccion.equals("YuscarÃ¡n")) {
                cbxAldea.addItem("YuscarÃ¡n");
                cbxAldea.addItem("El Barro");
                cbxAldea.addItem("El Cordoncillo");
                cbxAldea.addItem("El Chaguite de Oriente");
                cbxAldea.addItem("El Chaguite Sur");
                cbxAldea.addItem("El Ocotal");
                cbxAldea.addItem("El PericÃ³n");
                cbxAldea.addItem("El Rancho del Obispo");
                cbxAldea.addItem("El Robledal");
                cbxAldea.addItem("El Rodeo");
                cbxAldea.addItem("El TeÃ±idero");
                cbxAldea.addItem("El Zarzal");
                cbxAldea.addItem("La CiÃ©nega");
                cbxAldea.addItem("La Insula");
                cbxAldea.addItem("Las Crucitas");
                cbxAldea.addItem("Los LaÃ­nez");
                cbxAldea.addItem("Ojo de Agua");
                cbxAldea.addItem("Sabana Redonda");
            } else if (seleccion.equals("Liure")) {
                cbxAldea.addItem("AsunciÃ³n");
                cbxAldea.addItem("Bocuire");
                cbxAldea.addItem("Monte Grande");
                cbxAldea.addItem("San RamÃ³n");
                cbxAldea.addItem("Santa Cruz");
            } else if (seleccion.equals("Soledad")) {
                cbxAldea.addItem("Soledad Centro");
                cbxAldea.addItem("La Paz o RodeÃ­to");
                cbxAldea.addItem("La Victoria");
                cbxAldea.addItem("Las MarÃ­as");
                cbxAldea.addItem("Los Alpes");
                cbxAldea.addItem("San Diego");
                cbxAldea.addItem("San Marcos");
                cbxAldea.addItem("Santo Domingo");
            } else if (seleccion.equals("Texiguat")) {
                cbxAldea.addItem("Texiguat");
                cbxAldea.addItem("AsunciÃ³n");
                cbxAldea.addItem("El Zapotal");
                cbxAldea.addItem("GÃ¼inopito");
                cbxAldea.addItem("Jamayupe");
                cbxAldea.addItem("RÃ­o Arriba");
                cbxAldea.addItem("San Lorenzo");
                cbxAldea.addItem("San SebastiÃ¡n");
                cbxAldea.addItem("Cunaire");
            } else if (seleccion.equals("Alauca")) {
                cbxAldea.addItem("Alauca");
                cbxAldea.addItem("Buena Vista");
                cbxAldea.addItem("Chaguite Grande");
                cbxAldea.addItem("El Momotombo");
                cbxAldea.addItem("Chinampa o Chilampa");
                cbxAldea.addItem("El JÃ­caro");
                cbxAldea.addItem("El Matapalo");
                cbxAldea.addItem("El Pedregalito");
                cbxAldea.addItem("La Chichigua");
                cbxAldea.addItem("La Jagua");
                cbxAldea.addItem("La Manzanilla");
                cbxAldea.addItem("Las Limas");
                cbxAldea.addItem("Las Manos");
                cbxAldea.addItem("Los Matasanos de RÃ­o Arriba");
                cbxAldea.addItem("San Antonio");
                cbxAldea.addItem("Sabana Redonda");
            } else if (seleccion.equals("GÃ¼inope")) {
                cbxAldea.addItem("GÃ¼inope");
                cbxAldea.addItem("Arrayanes");
                cbxAldea.addItem("Casitas");
                cbxAldea.addItem("Galeras");
                cbxAldea.addItem("Las LiquidÃ¡mbar");
                cbxAldea.addItem("Lavanderos");
                cbxAldea.addItem("Mansaragua");
                cbxAldea.addItem("Pacayas");
                cbxAldea.addItem("Santa Rosa");
                cbxAldea.addItem("Silisgualagua");
                cbxAldea.addItem("Lizapa");
                cbxAldea.addItem("La Arocha");
                cbxAldea.addItem("Ocotales");
                cbxAldea.addItem("Loma Verde");
            } else if (seleccion.equals("San Lucas")) {
                cbxAldea.addItem("San Lucas");
                cbxAldea.addItem("ApalÃ­pi");
                cbxAldea.addItem("Candelaria");
                cbxAldea.addItem("Junacatal");
                cbxAldea.addItem("La MontaÃ±ita");
                cbxAldea.addItem("Los Quebrachos");
                cbxAldea.addItem("Mactuca");
                cbxAldea.addItem("Navijupe");
                cbxAldea.addItem("Surule");
                cbxAldea.addItem("Tapahuasca");
            } else if (seleccion.equals("OropolÃ­")) {
                cbxAldea.addItem("OropolÃ­");
                cbxAldea.addItem("Chaguite Grande");
                cbxAldea.addItem("El Barro");
                cbxAldea.addItem("El Corralito");
                cbxAldea.addItem("El Desecho");
                cbxAldea.addItem("El JÃ­caro");
                cbxAldea.addItem("La Mesa");
                cbxAldea.addItem("Las Casitas");
                cbxAldea.addItem("Las Crucitas");
                cbxAldea.addItem("OrealÃ­");
                cbxAldea.addItem("Samayare");
                cbxAldea.addItem("Rosa de Abril (Agua Podrida)");
                cbxAldea.addItem("Quebrada grande");
                cbxAldea.addItem("El Carrizal");
                cbxAldea.addItem("El Hisopo");
            } else if (seleccion.equals("San Antonio de Flores")) {
                cbxAldea.addItem("San Antonio de Flores");
                cbxAldea.addItem("ApalÃ­pi");
                cbxAldea.addItem("Comunidad");
                cbxAldea.addItem("El Chaguite");
                cbxAldea.addItem("El Espinal");
                cbxAldea.addItem("Mandasta");
                cbxAldea.addItem("Orlica");
                cbxAldea.addItem("Quebrada Grande");
                cbxAldea.addItem("Tolobrito");
            } else if (seleccion.equals("San MatÃ­as")) {
                cbxAldea.addItem("San MatÃ­as");
                cbxAldea.addItem("Corral Falso");
                cbxAldea.addItem("El Espinito");
                cbxAldea.addItem("El GuayacÃ¡n");
                cbxAldea.addItem("El Robledal");
                cbxAldea.addItem("La ConcepciÃ³n");
                cbxAldea.addItem("Las Tunas");
                cbxAldea.addItem("San JerÃ³nimo");
                cbxAldea.addItem("Santa Rosa");
            } else if (seleccion.equals("Vado Ancho")) {
                cbxAldea.addItem("Vado Ancho");
                cbxAldea.addItem("Chaperna");
                cbxAldea.addItem("Las Uvillas");
                cbxAldea.addItem("San JerÃ³nimo de Vado Ancho");
                cbxAldea.addItem("Tolobre");
            } else if (seleccion.equals("Jacaleapa")) {
                cbxAldea.addItem("Jacaleapa");
                cbxAldea.addItem("La Chorrera");
                cbxAldea.addItem("Lomas Limpias");
            } else if (seleccion.equals("Potrerillos")) {
                cbxAldea.addItem("Potrerillos");
                cbxAldea.addItem("El Junquillo");
                cbxAldea.addItem("El Limoncillo");
                cbxAldea.addItem("Las Crucitas");
                cbxAldea.addItem("Las Delicias");
                cbxAldea.addItem("Loma de Enmedio");
                cbxAldea.addItem("Lomanillos");
                cbxAldea.addItem("Sabana Redonda");
            } else if (seleccion.equals("Yauyupe")) {
                cbxAldea.addItem("Yauyupe");
                cbxAldea.addItem("Chaguitillos (El RÃ­o)");
                cbxAldea.addItem("El Hornito");
                cbxAldea.addItem("El Picadero");
                cbxAldea.addItem("La Cuevita");
                cbxAldea.addItem("Cusmatu");
            } else {
                cbxAldea.addItem("SelecciÃ³n no vÃ¡lida");
            }
        }
    }//GEN-LAST:event_cbxMunicbxMuniItemStateChanged

    private void txtSalarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalarioKeyTyped
        char c = evt.getKeyChar();
        String texto = txtSalario.getText();
        if ((c < '0' || c > '9') && (c < ',' || c > ',') && (texto.length() < 6) || txtSalario.getText().length() > 6) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSalarioKeyTyped

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Listado_Empleados abrir = new Listado_Empleados();
        abrir.setVisible(true);
       // this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static final javax.swing.JButton btn_editar = new javax.swing.JButton();
    public javax.swing.JComboBox<String> cbxAldea;
    public javax.swing.JComboBox<String> cbxEstC;
    public javax.swing.JComboBox<String> cbxMuni;
    public javax.swing.JComboBox<String> cbxSexo;
    public javax.swing.JTextField id_empleado;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    public javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    public com.toedter.calendar.JDateChooser jdFechaNac;
    public javax.swing.JLabel lbl_id;
    public javax.swing.JTextField txtApellido1;
    public javax.swing.JTextField txtApellido2;
    public javax.swing.JTextField txtCelular;
    public javax.swing.JTextField txtDireccion;
    public javax.swing.JTextField txtDni;
    public javax.swing.JTextField txtNacionalidad;
    public javax.swing.JTextField txtNombre1;
    public javax.swing.JTextField txtNombre2;
    public javax.swing.JTextField txtRtn;
    public javax.swing.JTextField txtSalario;
    public javax.swing.JTextField txt_FijoCel;
    public javax.swing.JTextField txt_RefeDireccion;
    // End of variables declaration//GEN-END:variables
}
