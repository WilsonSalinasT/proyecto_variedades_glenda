/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Paneles;

import com.toedter.calendar.JDateChooser;
import java.awt.Color;
import java.awt.event.ItemEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.UIManager;

/**
 *
 * @author Admin
 */
public class Crear_Empleado extends javax.swing.JPanel {

     TextPrompt holder;
    /**
     * Creates new form Crear_Empleado
     */
    public Crear_Empleado() {
        initComponents();
        holder = new TextPrompt("XXXX-XXXX-XXXXX", txtDni);
        holder = new TextPrompt("XXXX-XXXX-XXXXXX", txtRtn);
        holder = new TextPrompt("####-####", txtCelular);
        holder = new TextPrompt("##,###", txtSalario);
        holder = new TextPrompt("####-####", txt_FijoCel);

//        setLocationRelativeTo(null);

        // Poner como fecha Maxima el 1/01/2005 para que registre desde personas mayores de 18 años como empleados
        // y personas como maximo con 70 años
        Calendar maxDate = Calendar.getInstance();
        maxDate.set(2005, Calendar.JANUARY, 1); // 1 de enero de 2005
        jdFechaNac.setMaxSelectableDate(maxDate.getTime());
        Calendar minDate = Calendar.getInstance();
        minDate.set(1950, Calendar.JANUARY, 1);
        jdFechaNac.setMinSelectableDate(minDate.getTime());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        txtNombre = new javax.swing.JTextField();
        txtNombre6 = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtApellido6 = new javax.swing.JTextField();
        txtRtn = new javax.swing.JTextField();
        txtNacionalidad = new javax.swing.JTextField();
        txtDireccion = new javax.swing.JTextField();
        txt_RefeDireccion = new javax.swing.JTextField();
        txtCelular = new javax.swing.JTextField();
        txt_FijoCel = new javax.swing.JTextField();
        txtDni = new javax.swing.JTextField();
        cbxAldea = new javax.swing.JComboBox<>();
        cbxMuni = new javax.swing.JComboBox<>();
        txtSalario = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        cbx_sexo = new javax.swing.JComboBox<>();
        cbx_estC = new javax.swing.JComboBox<>();
        jdFechaNac = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jLabel58 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        jPanel3.setPreferredSize(new java.awt.Dimension(1024, 640));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        txtNombre.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Primer Nombre", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });
        txtNombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombretxtNombre1KeyTyped(evt);
            }
        });

        txtNombre6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Segundo Nombre", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtNombre6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombre6txtNombre2ActionPerformed(evt);
            }
        });
        txtNombre6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNombre6txtNombre2KeyTyped(evt);
            }
        });

        txtApellido.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Primer Apellido", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtApellido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtApellidotxtApellido1ActionPerformed(evt);
            }
        });
        txtApellido.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellidotxtApellido1KeyTyped(evt);
            }
        });

        txtApellido6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Segundo Apellido", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtApellido6.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtApellido6txtApellido2KeyTyped(evt);
            }
        });

        txtRtn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtRtn.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "RTN", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtRtn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtRtntxtRtnKeyTyped(evt);
            }
        });

        txtNacionalidad.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Nacionalidad", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtNacionalidad.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtNacionalidadtxtNacionalidadKeyTyped(evt);
            }
        });

        txtDireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Barrio", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDirecciontxtDireccionActionPerformed(evt);
            }
        });
        txtDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDirecciontxtDireccionKeyTyped(evt);
            }
        });

        txt_RefeDireccion.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Referencia de Domicilio", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txt_RefeDireccion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_RefeDirecciontxt_RefeDireccionActionPerformed(evt);
            }
        });
        txt_RefeDireccion.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_RefeDirecciontxt_RefeDireccionKeyTyped(evt);
            }
        });

        txtCelular.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Celular", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtCelular.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCelulartxtCelularActionPerformed(evt);
            }
        });
        txtCelular.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtCelulartxtCelularKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCelulartxtCelularKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtCelulartxtCelularKeyTyped(evt);
            }
        });

        txt_FijoCel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Télefono Fijo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txt_FijoCel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txt_FijoCeltxt_FijoCelActionPerformed(evt);
            }
        });
        txt_FijoCel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txt_FijoCeltxt_FijoCelKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txt_FijoCeltxt_FijoCelKeyTyped(evt);
            }
        });

        btn_crear4.setBackground(new java.awt.Color(255, 0, 204));
        btn_crear4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btn_crear4.setForeground(new java.awt.Color(51, 51, 51));
        btn_crear4.setText("CREAR");
        btn_crear4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_crear4btn_crearMouseClicked(evt);
            }
        });
        btn_crear4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_crear4btn_crearActionPerformed(evt);
            }
        });

        txtDni.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDni.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "DNI", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtDni.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDnitxtDniKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDnitxtDniKeyTyped(evt);
            }
        });

        cbxAldea.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Aldea/Comunidad", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N

        cbxMuni.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbxMuni.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Trojes", "Danlí", "El Paraíso", "Teupasenti", "Morocelí", "Yuscarán", "Liure", "Soledad", "Texiguat", "Alauca", "Güinope", "San Lucas", "Oropolí", "San Antonio de Flores", "San Matías", "Vado Ancho", "Jacaleapa", "Potrerillos", "Yauyupe" }));
        cbxMuni.setSelectedIndex(-1);
        cbxMuni.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Municipio", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        cbxMuni.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbxMunicbxMuniItemStateChanged(evt);
            }
        });

        txtSalario.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Salario", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N
        txtSalario.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSalarioKeyTyped(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Arial Black", 2, 12)); // NOI18N
        jLabel7.setText("Dirección de Domicilio Exacta");

        jButton3.setBackground(new java.awt.Color(255, 0, 204));
        jButton3.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jButton3.setText("ATRÁS");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        cbx_sexo.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        cbx_sexo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Femenino", "Masculino" }));
        cbx_sexo.setSelectedIndex(-1);
        cbx_sexo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sexo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 2, 12))); // NOI18N

        cbx_estC.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Soltero", "Casado", "Viudo" }));
        cbx_estC.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Estado Civil", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial Black", 1, 12))); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(txtNombre6, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(39, 39, 39)
                                .addComponent(jdFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(txtApellido6))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(cbx_sexo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDni)
                            .addComponent(cbx_estC, 0, 427, Short.MAX_VALUE))
                        .addGap(33, 33, 33)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRtn)
                            .addComponent(txtNacionalidad)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addComponent(txtDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 362, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(txt_RefeDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtCelular)
                            .addComponent(cbxMuni, 0, 252, Short.MAX_VALUE))
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(cbxAldea, 0, 290, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(txt_FijoCel, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(75, 75, 75))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 299, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(298, 298, 298))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(288, 288, 288))))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButton3)
                .addGap(336, 336, 336)
                .addComponent(btn_crear4)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(277, 277, 277)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtApellido6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNombre6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(cbx_sexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtRtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNacionalidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbx_estC, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(jLabel7)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDireccion, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxAldea, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(cbxMuni, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txt_RefeDireccion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCelular, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txt_FijoCel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(39, 39, 39)
                .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_crear4)
                    .addComponent(jButton3))
                .addGap(12, 12, 12))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(351, 351, 351)
                .addComponent(jdFechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 102, 102));

        jLabel58.setFont(new java.awt.Font("Arial Black", 3, 36)); // NOI18N
        jLabel58.setText("Datos del Personal");

        jLabel8.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel8.setText("9801-4550/3308-9197");

        jLabel9.setFont(new java.awt.Font("Segoe Print", 1, 14)); // NOI18N
        jLabel9.setText("Trojes, El Paraíso");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(272, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel58, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(340, 340, 340))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(436, 436, 436))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(458, 458, 458))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel58)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel9)
                .addContainerGap(33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 6, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 727, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 8, Short.MAX_VALUE)))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1024, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 640, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtNombretxtNombre1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombretxtNombre1KeyTyped
        // validación en el campo de nombre para que acepte solo letra y letras tildades, se utiliza el codigo ASCII para las letras tildades
        char c = evt.getKeyChar();
        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && ((int) evt.getKeyChar() <= 160) || txtNombre.getText().length() >= 20)
        evt.consume();
    }//GEN-LAST:event_txtNombretxtNombre1KeyTyped

    private void txtNombre6txtNombre2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombre6txtNombre2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombre6txtNombre2ActionPerformed

    private void txtNombre6txtNombre2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNombre6txtNombre2KeyTyped
        // validación en el campo de nombre para que acepte solo letra y letras tildades, se utiliza el codigo ASCII para las letras tildades
        char c = evt.getKeyChar();
        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && ((int) evt.getKeyChar() <= 160) || txtNombre6.getText().length() >= 20)
        evt.consume();
    }//GEN-LAST:event_txtNombre6txtNombre2KeyTyped

    private void txtApellidotxtApellido1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtApellidotxtApellido1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtApellidotxtApellido1ActionPerformed

    private void txtApellidotxtApellido1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellidotxtApellido1KeyTyped
        // validación en el campo de nombre para que acepte solo letra y letras tildades, se utiliza el codigo ASCII para las letras tildades
        char c = evt.getKeyChar();
        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && ((int) evt.getKeyChar() <= 160) || txtApellido.getText().length() >= 20)
        evt.consume();
    }//GEN-LAST:event_txtApellidotxtApellido1KeyTyped

    private void txtApellido6txtApellido2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtApellido6txtApellido2KeyTyped
        // validación en el campo de nombre para que acepte solo letra y letras tildades, se utiliza el codigo ASCII para las letras tildades
        char c = evt.getKeyChar();
        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && ((int) evt.getKeyChar() <= 160) || txtApellido6.getText().length() >= 20)
        evt.consume();
    }//GEN-LAST:event_txtApellido6txtApellido2KeyTyped

    private void txtRtntxtRtnKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRtntxtRtnKeyTyped
        char c = evt.getKeyChar();

        String texto = txtRtn.getText();

        // Verificar si se ingresó un dígito y el número de caracteres no excede el formato esperado
        if (Character.isDigit(c) && texto.length() < 16) {
            if (texto.length() == 4 || texto.length() == 9) {
                txtRtn.setText(texto + "-");
            }
        } else {
            evt.consume();  // Ignorar el carácter ingresado si no cumple con el formato esperado
        }
    }//GEN-LAST:event_txtRtntxtRtnKeyTyped

    private void txtNacionalidadtxtNacionalidadKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtNacionalidadtxtNacionalidadKeyTyped
        // validación en el campo de nombre para que acepte solo letra y letras tildades, se utiliza el codigo ASCII para las letras tildades
        char c = evt.getKeyChar();
        if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z') && ((int) evt.getKeyChar() <= 160) || txtNacionalidad.getText().length() >= 20)
        evt.consume();
    }//GEN-LAST:event_txtNacionalidadtxtNacionalidadKeyTyped

    private void txtDirecciontxtDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDirecciontxtDireccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDirecciontxtDireccionActionPerformed

    private void txtDirecciontxtDireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDirecciontxtDireccionKeyTyped
        char c = evt.getKeyChar();
        String text = txtDireccion.getText();

        // Verificar si el carácter es un espacio y si es el primer carácter en el campo
        if (c == ' ' && text.length() == 0) {
            evt.consume();
            return;
        }

        // Verificar si el carácter es una letra sin tilde, letra con tilde, número o punto
        if (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '.' || ((int) c <= 160))) {
            evt.consume();
            return;
        }

        // Verificar si la longitud del texto es mayor o igual a 20
        if (text.length() >= 50) {
            evt.consume();
            return;
        }
    }//GEN-LAST:event_txtDirecciontxtDireccionKeyTyped

    private void txt_RefeDirecciontxt_RefeDireccionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_RefeDirecciontxt_RefeDireccionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_RefeDirecciontxt_RefeDireccionActionPerformed

    private void txt_RefeDirecciontxt_RefeDireccionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_RefeDirecciontxt_RefeDireccionKeyTyped
        char c = evt.getKeyChar();
        String text = txt_RefeDireccion.getText();

        // Verificar si el carácter es un espacio y si es el primer carácter en el campo
        if (c == ' ' && text.length() == 0) {
            evt.consume();
            return;
        }

        // Verificar si el carácter es una letra sin tilde, letra con tilde, número o punto
        if (!((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9') || c == '.' || ((int) c <= 160))) {
            evt.consume();
            return;
        }

        // Verificar si la longitud del texto es mayor o igual a 20
        if (text.length() >= 200) {
            evt.consume();
            return;
        }
    }//GEN-LAST:event_txt_RefeDirecciontxt_RefeDireccionKeyTyped

    private void txtCelulartxtCelularActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCelulartxtCelularActionPerformed

    }//GEN-LAST:event_txtCelulartxtCelularActionPerformed

    private void txtCelulartxtCelularKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelulartxtCelularKeyPressed

    }//GEN-LAST:event_txtCelulartxtCelularKeyPressed

    private void txtCelulartxtCelularKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelulartxtCelularKeyReleased

        String texto = txtCelular.getText().trim();
        char c = evt.getKeyChar();

        if (texto.startsWith("9") || texto.startsWith("8") || texto.startsWith("3") || c == 9 && c == 8 & c == 3) {
            txtCelular.setBackground(Color.green);
        } else {
            // El texto no cumple con la validación
            evt.consume(); // Bloquea el carácter
            JOptionPane.showMessageDialog(this, "El número de celular debe comenzar con 9, 8 o 3", "Error", JOptionPane.ERROR_MESSAGE);
            txtCelular.setBackground(Color.red);
            txtCelular.setText("");

        }
    }//GEN-LAST:event_txtCelulartxtCelularKeyReleased

    private void txtCelulartxtCelularKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCelulartxtCelularKeyTyped
        char c = evt.getKeyChar();
        String texto = txtCelular.getText();

        // Verificar si se ingresó un dígito y el número de caracteres no excede el formato esperado
        if (Character.isDigit(c) && texto.length() < 9 || texto.startsWith("9") && c == 9 && c == 8 & c == 3) {
            // Formato: XXXX-XXXX (4 dígitos seguidos de un guion y otros 4 dígitos)
            if (texto.length() == 4) {
                txtCelular.setText(texto + "-");
            }
        } else {
            txtCelular.setText("");
            evt.consume();  // Ignorar el carácter ingresado si no cumple con el formato esperado
        }
    }//GEN-LAST:event_txtCelulartxtCelularKeyTyped

    private void txt_FijoCeltxt_FijoCelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txt_FijoCeltxt_FijoCelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txt_FijoCeltxt_FijoCelActionPerformed

    private void txt_FijoCeltxt_FijoCelKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_FijoCeltxt_FijoCelKeyReleased
        String texto = txt_FijoCel.getText().trim();

        if (texto.startsWith("2")) {
            txt_FijoCel.setBackground(Color.green);
        } else {
            // El texto no cumple con la validación
            JOptionPane.showMessageDialog(this, "El número de teléfono fijo debe iniciar con 2", "Error", JOptionPane.ERROR_MESSAGE);
            txt_FijoCel.setBackground(Color.red);
            txt_FijoCel.setText("");
        }
    }//GEN-LAST:event_txt_FijoCeltxt_FijoCelKeyReleased

    private void txt_FijoCeltxt_FijoCelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt_FijoCeltxt_FijoCelKeyTyped
        char c = evt.getKeyChar();
        String texto = txt_FijoCel.getText();

        // Verificar si se ingresó un dígito y el número de caracteres no excede el formato esperado
        if (Character.isDigit(c) && texto.length() < 9) {
            // Formato: XXXX-XXXX (4 dígitos seguidos de un guion y otros 4 dígitos)
            if (texto.length() == 4) {
                txt_FijoCel.setText(texto + "-");
            }
        } else {
            evt.consume();
            txt_FijoCel.setText("");
        }
    }//GEN-LAST:event_txt_FijoCeltxt_FijoCelKeyTyped

    private void btn_crear4btn_crearMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_crear4btn_crearMouseClicked
        // PARA VALIDAR

        String primerNombre = txtNombre.getText().trim();
        String primerApellido = txtApellido.getText().trim();
        String nacionalidad = txtNacionalidad.getText().trim();
        String direccion = txtDireccion.getText().trim();
        String celular = txtCelular.getText().trim();

        String salario = txtSalario.getText().trim();
        String dni = txtDni.getText().trim();
        String rtn = txtRtn.getText().trim();

        if (primerNombre.isEmpty() || primerApellido.isEmpty() || nacionalidad.isEmpty() || direccion.isEmpty()
            || celular.isEmpty() || salario.isEmpty() || dni.isEmpty()
            || rtn.isEmpty() || jdFechaNac.getDate() == null) {
            // El campo está vacío, muestra un mensaje de error
            JOptionPane.showMessageDialog(this, "Llene todos los espacios necesarios", "Error", JOptionPane.ERROR_MESSAGE);

            // Verifica los campos de texto y resalta el primero vacío
            JTextField[] textFields = {txtNombre, txtApellido, txtDireccion, txtCelular, txtDni, txtRtn,
                txtNacionalidad, txtSalario};
            boolean foundEmpty = false;

            for (JTextField textField : textFields) {
                if (textField.getText().isEmpty()) {
                    textField.setBackground(Color.RED); // Establece el color de resaltado en rojo
                } else {
                    textField.setBackground(UIManager.getColor("TextField.background")); // Restaura el color por defecto
                }
            }

            // Verifica los JDateChooser y resalta el primero vacío
            JDateChooser[] dateChoosers = {jdFechaNac};

            for (JDateChooser dateChooser : dateChoosers) {
                if (dateChooser.getDate() == null) {
                    // Cambia el color del borde a rojo para resaltarlo
                    dateChooser.setBorder(BorderFactory.createLineBorder(Color.RED));
                    foundEmpty = true;
                } else {
                    // Restaura el borde por defecto
                    dateChooser.setBorder(BorderFactory.createLineBorder(UIManager.getColor("TextField.border")));
                }
            }

            // VALIDACIÓN PARA EL NÚMERO DE DNI y RTN
            // Verificar el formato del RTN
            if (!rtn.matches("^[0-9]{4}-[0-9]{4}-[0-9]{6}$")) {
                JOptionPane.showMessageDialog(this, "Ingrese un formato de RTN correcto", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // Obtener los valores de departamento, municipio y año
                String depto = rtn.substring(0, 2);
                String municipio = rtn.substring(2, 4);
                String anio = rtn.substring(5, 9);
                String correlativo = rtn.substring(10);

                // Convertir todos los valores a números
                int deptoN = Integer.parseInt(depto);
                int municipioN = Integer.parseInt(municipio);
                int anioN = Integer.parseInt(anio);
                int correlativoN = Integer.parseInt(correlativo);

                // Validar los rangos para departamento y municipio
                boolean departamentoValido = false;
                boolean municipioValido = false;

                if (deptoN == 7 && municipioN >= 1 && municipioN <= 5) {
                    departamentoValido = true;
                    municipioValido = true;
                } else if ((deptoN >= 1 && deptoN <= 6) || (deptoN >= 8 && deptoN <= 18)) {
                    departamentoValido = true;
                    if (deptoN == 1 && municipioN >= 1 && municipioN <= 8) {
                        municipioValido = true;
                    } else if (deptoN == 2 && municipioN >= 1 && municipioN <= 10) {
                        municipioValido = true;
                    } else if (deptoN == 3 && municipioN >= 1 && municipioN <= 21) {
                        municipioValido = true;
                    } else if (deptoN == 4 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 5 && municipioN >= 1 && municipioN <= 12) {
                        municipioValido = true;
                    } else if (deptoN == 6 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 8 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 9 && municipioN >= 1 && municipioN <= 6) {
                        municipioValido = true;
                    } else if (deptoN == 10 && municipioN >= 1 && municipioN <= 17) {
                        municipioValido = true;
                    } else if (deptoN == 11 && municipioN >= 1 && municipioN <= 4) {
                        municipioValido = true;
                    } else if (deptoN == 12 && municipioN >= 1 && municipioN <= 19) {
                        municipioValido = true;
                    } else if (deptoN == 13 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 14 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 15 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 16 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 17 && municipioN >= 1 && municipioN <= 9) {
                        municipioValido = true;
                    } else if (deptoN == 18 && municipioN >= 1 && municipioN <= 11) {
                        municipioValido = true;
                    }
                }

                boolean anioValido = anioN >= 1960 && anioN <= 2005;
                boolean correlativoValido = correlativoN >= 1 && correlativoN <= 999999;

                if (!departamentoValido || !municipioValido || !anioValido || !correlativoValido) {
                    JOptionPane.showMessageDialog(this, "Ingrese un RTN válido", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    // El RTN es válido, realizar la acción deseada aquí
                }
            }

            //DNI
            // Verificar el formato del DNI
            if (!dni.matches("^[0-9]{4}-[0-9]{4}-[0-9]{5}$")) {
                JOptionPane.showMessageDialog(this, "Ingrese un formato de DNI correcto", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // Obtener los valores de departamento, municipio y año
                String depto = dni.substring(0, 2);
                String municipio = dni.substring(2, 4);
                String anio = dni.substring(5, 9);
                String correlativo = dni.substring(10);

                // Convertir todos los valores a números
                int deptoN = Integer.parseInt(depto);
                int municipioN = Integer.parseInt(municipio);
                int anioN = Integer.parseInt(anio);
                int correlativoN = Integer.parseInt(correlativo);

                // Validar los rangos para departamento y municipio
                boolean departamentoValido = false;
                boolean municipioValido = false;

                if (deptoN == 7 && municipioN >= 1 && municipioN <= 5) {
                    departamentoValido = true;
                    municipioValido = true;
                } else if ((deptoN >= 1 && deptoN <= 6) || (deptoN >= 8 && deptoN <= 18)) {
                    departamentoValido = true;
                    if (deptoN == 1 && municipioN >= 1 && municipioN <= 8) {
                        municipioValido = true;
                    } else if (deptoN == 2 && municipioN >= 1 && municipioN <= 10) {
                        municipioValido = true;
                    } else if (deptoN == 3 && municipioN >= 1 && municipioN <= 21) {
                        municipioValido = true;
                    } else if (deptoN == 4 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 5 && municipioN >= 1 && municipioN <= 12) {
                        municipioValido = true;
                    } else if (deptoN == 6 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 8 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 9 && municipioN >= 1 && municipioN <= 6) {
                        municipioValido = true;
                    } else if (deptoN == 10 && municipioN >= 1 && municipioN <= 17) {
                        municipioValido = true;
                    } else if (deptoN == 11 && municipioN >= 1 && municipioN <= 4) {
                        municipioValido = true;
                    } else if (deptoN == 12 && municipioN >= 1 && municipioN <= 19) {
                        municipioValido = true;
                    } else if (deptoN == 13 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 14 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 15 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 16 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 17 && municipioN >= 1 && municipioN <= 9) {
                        municipioValido = true;
                    } else if (deptoN == 18 && municipioN >= 1 && municipioN <= 11) {
                        municipioValido = true;
                    }
                }

                boolean anioValido = anioN >= 1960 && anioN <= 2005;
                boolean correlativoValido = correlativoN >= 1 && correlativoN <= 99999;

                if (!departamentoValido || !municipioValido || !anioValido || !correlativoValido) {
                    JOptionPane.showMessageDialog(this, "Ingrese un DNI válido", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    // El DNI es válido, enviar a la base de Datos
                }
            }

            if (!salario.isEmpty()) {
                try {
                    int sal = Integer.parseInt(salario);

                    if (sal > 99999 || sal < 1000) {
                        JOptionPane.showMessageDialog(this, "El salario debe ser mayor de 1000 y menor de 5 cifras", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    // Manejar el caso en el que 'salario' no es un número válido
                }
            }

        } else {
            JOptionPane.showMessageDialog(this, "Registro Guardado", "Guardado", JOptionPane.OK_OPTION);

//            Listado_Empleados abrir = new Listado_Empleados();
//            abrir.setVisible(true);
//            //this.dispose();
        }

    }//GEN-LAST:event_btn_crear4btn_crearMouseClicked

    private void btn_crear4btn_crearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_crear4btn_crearActionPerformed

        String nombre1 = txtNombre.getText();
        String nombre2 = txtNombre6.getText();
        String apellido1 = txtApellido.getText();
        String apellido2 = txtApellido6.getText();

        java.util.Date fecha_na = jdFechaNac.getDate();
        String sexo = (String) cbx_sexo.getSelectedItem();
        String barrio = txtDireccion.getText();
        String municipioD = (String) cbxMuni.getSelectedItem();
        String aldea = (String) cbxAldea.getSelectedItem();
        String refe_direccion = txt_RefeDireccion.getText();
        String celular = txtCelular.getText();
        String fijo_cel = txt_FijoCel.getText();
        String dni = txtDni.getText();
        String rtn = txtRtn.getText();
        String estado_civil = (String) cbx_estC.getSelectedItem();
        String nacionalidad = txtNacionalidad.getText();
        String salario = txtSalario.getText();

        if (nombre1.isEmpty() || apellido1.isEmpty() || fecha_na.equals(null) || barrio.isEmpty()
            || celular.isEmpty() || dni.isEmpty() || rtn.isEmpty() || nacionalidad.isEmpty() ) {
            JOptionPane.showMessageDialog(this, "Llene todos los espacios necesarios", "Error", JOptionPane.ERROR_MESSAGE);

            // Verifica los campos de texto y resalta el primero vacío
            JTextField[] textFields = {txtNombre, txtApellido, txtDireccion, txtCelular, txtDni, txtRtn,
                txtNacionalidad, txtSalario};
            boolean foundEmpty = false;

            for (JTextField textField : textFields) {
                if (textField.getText().isEmpty()) {
                    textField.setBackground(Color.RED); // Establece el color de resaltado en rojo
                } else {
                    textField.setBackground(UIManager.getColor("TextField.background")); // Restaura el color por defecto
                }
            }

            // Verifica los JDateChooser y resalta el primero vacío
            JDateChooser[] dateChoosers = {jdFechaNac};

            for (JDateChooser dateChooser : dateChoosers) {
                if (dateChooser.getDate() == null) {
                    // Cambia el color del borde a rojo para resaltarlo
                    dateChooser.setBorder(BorderFactory.createLineBorder(Color.RED));
                    foundEmpty = true;
                } else {
                    // Restaura el borde por defecto
                    dateChooser.setBorder(BorderFactory.createLineBorder(UIManager.getColor("TextField.border")));
                }
            }
            if(cbx_sexo.getSelectedIndex() == -1){
                JOptionPane.showMessageDialog(this, "Selecione un genero", "Error", JOptionPane.ERROR_MESSAGE);
            }

            if(cbx_estC.getSelectedIndex() == -1){
                JOptionPane.showMessageDialog(this, "Selecione un estado civil", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // VALIDACIÓN PARA EL NÚMERO DE DNI y RTN
            // Verificar el formato del RTN
            if (!rtn.matches("^[0-9]{4}-[0-9]{4}-[0-9]{6}$")) {
                JOptionPane.showMessageDialog(this, "Ingrese un formato de RTN correcto", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // Obtener los valores de departamento, municipio y año
                String depto = rtn.substring(0, 2);
                String municipio = rtn.substring(2, 4);
                String anio = rtn.substring(5, 9);
                String correlativo = rtn.substring(10);

                // Convertir todos los valores a números
                int deptoN = Integer.parseInt(depto);
                int municipioN = Integer.parseInt(municipio);
                int anioN = Integer.parseInt(anio);
                int correlativoN = Integer.parseInt(correlativo);

                // Validar los rangos para departamento y municipio
                boolean departamentoValido = false;
                boolean municipioValido = false;

                if (deptoN == 7 && municipioN >= 1 && municipioN <= 5) {
                    departamentoValido = true;
                    municipioValido = true;
                } else if ((deptoN >= 1 && deptoN <= 6) || (deptoN >= 8 && deptoN <= 18)) {
                    departamentoValido = true;
                    if (deptoN == 1 && municipioN >= 1 && municipioN <= 8) {
                        municipioValido = true;
                    } else if (deptoN == 2 && municipioN >= 1 && municipioN <= 10) {
                        municipioValido = true;
                    } else if (deptoN == 3 && municipioN >= 1 && municipioN <= 21) {
                        municipioValido = true;
                    } else if (deptoN == 4 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 5 && municipioN >= 1 && municipioN <= 12) {
                        municipioValido = true;
                    } else if (deptoN == 6 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 8 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 9 && municipioN >= 1 && municipioN <= 6) {
                        municipioValido = true;
                    } else if (deptoN == 10 && municipioN >= 1 && municipioN <= 17) {
                        municipioValido = true;
                    } else if (deptoN == 11 && municipioN >= 1 && municipioN <= 4) {
                        municipioValido = true;
                    } else if (deptoN == 12 && municipioN >= 1 && municipioN <= 19) {
                        municipioValido = true;
                    } else if (deptoN == 13 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 14 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 15 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 16 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 17 && municipioN >= 1 && municipioN <= 9) {
                        municipioValido = true;
                    } else if (deptoN == 18 && municipioN >= 1 && municipioN <= 11) {
                        municipioValido = true;
                    }
                }

                boolean anioValido = anioN >= 1960 && anioN <= 2005;
                boolean correlativoValido = correlativoN >= 1 && correlativoN <= 99999;

                if (!departamentoValido || !municipioValido || !anioValido || !correlativoValido) {
                    JOptionPane.showMessageDialog(this, "Ingrese un RTN válido", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    // El DNI es válido, realizar la acción deseada aquí
                }
            }

            //RTN
            // Verificar el formato del DNI
            if (!dni.matches("^[0-9]{4}-[0-9]{4}-[0-9]{5}$")) {
                JOptionPane.showMessageDialog(this, "Ingrese un formato de DNI correcto", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                // Obtener los valores de departamento, municipio y año
                String depto = dni.substring(0, 2);
                String municipio = dni.substring(2, 4);
                String anio = dni.substring(5, 9);
                String correlativo = dni.substring(10);

                // Convertir todos los valores a números
                int deptoN = Integer.parseInt(depto);
                int municipioN = Integer.parseInt(municipio);
                int anioN = Integer.parseInt(anio);
                int correlativoN = Integer.parseInt(correlativo);

                // Validar los rangos para departamento y municipio
                boolean departamentoValido = false;
                boolean municipioValido = false;

                if (deptoN == 7 && municipioN >= 1 && municipioN <= 5) {
                    departamentoValido = true;
                    municipioValido = true;
                } else if ((deptoN >= 1 && deptoN <= 6) || (deptoN >= 8 && deptoN <= 18)) {
                    departamentoValido = true;
                    if (deptoN == 1 && municipioN >= 1 && municipioN <= 8) {
                        municipioValido = true;
                    } else if (deptoN == 2 && municipioN >= 1 && municipioN <= 10) {
                        municipioValido = true;
                    } else if (deptoN == 3 && municipioN >= 1 && municipioN <= 21) {
                        municipioValido = true;
                    } else if (deptoN == 4 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 5 && municipioN >= 1 && municipioN <= 12) {
                        municipioValido = true;
                    } else if (deptoN == 6 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 8 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 9 && municipioN >= 1 && municipioN <= 6) {
                        municipioValido = true;
                    } else if (deptoN == 10 && municipioN >= 1 && municipioN <= 17) {
                        municipioValido = true;
                    } else if (deptoN == 11 && municipioN >= 1 && municipioN <= 4) {
                        municipioValido = true;
                    } else if (deptoN == 12 && municipioN >= 1 && municipioN <= 19) {
                        municipioValido = true;
                    } else if (deptoN == 13 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 14 && municipioN >= 1 && municipioN <= 16) {
                        municipioValido = true;
                    } else if (deptoN == 15 && municipioN >= 1 && municipioN <= 23) {
                        municipioValido = true;
                    } else if (deptoN == 16 && municipioN >= 1 && municipioN <= 28) {
                        municipioValido = true;
                    } else if (deptoN == 17 && municipioN >= 1 && municipioN <= 9) {
                        municipioValido = true;
                    } else if (deptoN == 18 && municipioN >= 1 && municipioN <= 11) {
                        municipioValido = true;
                    }
                }

                boolean anioValido = anioN >= 1960 && anioN <= 2005;
                boolean correlativoValido = correlativoN >= 1 && correlativoN <= 99999;

                if (!departamentoValido || !municipioValido || !anioValido || !correlativoValido) {
                    JOptionPane.showMessageDialog(this, "Ingrese un DNI válido", "Error", JOptionPane.ERROR_MESSAGE);
                } else {
                    // El DNI es válido, enviar a la base de Datos
                }
            }

            if (!salario.isEmpty()) {
                try {
                    int sal = Integer.parseInt(salario);

                    if (sal > 99999 || sal < 1000) {
                        JOptionPane.showMessageDialog(this, "El salario debe ser mayor de 1000 y menor de 5 cifras", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (NumberFormatException e) {
                    // Manejar el caso en el que 'salario' no es un número válido
                }
            }

        } else {

            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                Connection conn = DriverManager.getConnection("jdbc:sqlserver://localhost:1433;databaseName=GlendaDB;encrypt=true;trustServerCertificate=true;", "sa", "123456789");

                PreparedStatement ps = conn.prepareStatement("INSERT INTO Empleado (nombre1, nombre2, apellido1, apellido2, fecha_nacimiento, sexo,"
                    + "dni, rtn, estado_civil, nacionalidad, barrio, municipio, aldea, referenciaDomicilio, celular, fijo, salario) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                ps.setString(1, nombre1);
                ps.setString(2, nombre2);
                ps.setString(3, apellido1);
                ps.setString(4, apellido2);
                ps.setDate(5, new java.sql.Date(fecha_na.getTime()));
                ps.setString(6, sexo);
                ps.setString(7, dni);
                ps.setString(8, rtn);
                ps.setString(9, estado_civil);
                ps.setString(10, nacionalidad);
                ps.setString(11, barrio);
                ps.setString(12, municipioD);
                ps.setString(13, aldea);
                ps.setString(14, refe_direccion);
                ps.setString(15, celular);
                ps.setString(16, fijo_cel);
                ps.setString(17, salario);

                ps.execute();

            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, e.toString());
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(Crear_Empleado.class.getName()).log(Level.SEVERE, null, ex);
            }

        }
    }//GEN-LAST:event_btn_crear4btn_crearActionPerformed

    private void txtDnitxtDniKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDnitxtDniKeyReleased

    }//GEN-LAST:event_txtDnitxtDniKeyReleased

    private void txtDnitxtDniKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDnitxtDniKeyTyped
        char c = evt.getKeyChar();

        String texto = txtDni.getText();

        // Verificar si se ingresó un dígito y el número de caracteres no excede el formato esperado
        if (Character.isDigit(c) && texto.length() < 15) {
            if (texto.length() == 4 || texto.length() == 9) {
                txtDni.setText(texto + "-");
            }
        } else {
            evt.consume();  // Ignorar el carácter ingresado si no cumple con el formato esperado
        }
    }//GEN-LAST:event_txtDnitxtDniKeyTyped

    private void cbxMunicbxMuniItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbxMunicbxMuniItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            // Obtener el ítem seleccionado en comboBox1
            String seleccion = cbxMuni.getSelectedItem().toString();

            // Limpiar comboBox2
            cbxAldea.removeAllItems();

            /*
            Trojes
            Danlí
            El Paraíso
            Teupasenti
            Morocelí
            Yuscarán
            Liure
            Soledad
            Texiguat
            Alauca
            Güinope
            San Lucas
            Oropolí
            San Antonio de Flores
            San Matías
            Vado Ancho
            Jacaleapa
            Potrerillos
            Yauyupe

            */
            // Llenar comboBox2 en función de la selección en comboBox1
            if (seleccion.equals("Trojes")) {
                cbxAldea.addItem("Trojes");
                cbxAldea.addItem("Arenales");
                cbxAldea.addItem("Capire");
                cbxAldea.addItem("Cifuentes");
                cbxAldea.addItem("El Guineo");
                cbxAldea.addItem("Talpachí");
                cbxAldea.addItem("Yamales");
            } else if (seleccion.equals("Danlí")) {
                cbxAldea.addItem("Danlí");
                cbxAldea.addItem("Agua Fría");
                cbxAldea.addItem("Apalí");
                cbxAldea.addItem("Araulí");
                cbxAldea.addItem("Bañaderos");
                cbxAldea.addItem("Buena Esperanza de Azabache");
                cbxAldea.addItem("Chirinos");
                cbxAldea.addItem("El Arenal");
                cbxAldea.addItem("El Barro");
                cbxAldea.addItem("El Chichicaste");
                cbxAldea.addItem("El Maguelar");
                cbxAldea.addItem("El Matasano");
                cbxAldea.addItem("El Obraje");
                cbxAldea.addItem("El Olingo o El Porvenir");
                cbxAldea.addItem("El Pataste");
                cbxAldea.addItem("El Pescadero");
                cbxAldea.addItem("El Porvenir");
                cbxAldea.addItem("El Pozo Bendito");
                cbxAldea.addItem("El Tablón");
                cbxAldea.addItem("El Zamorano");
                cbxAldea.addItem("El Zapotillo");
                cbxAldea.addItem("El Zarzal");
                cbxAldea.addItem("Gualiqueme");
                cbxAldea.addItem("Jutiapa");
                cbxAldea.addItem("La Lima");
                cbxAldea.addItem("La Lodosa");
                cbxAldea.addItem("La Trinidad o Sartenejas");
                cbxAldea.addItem("Las Animas");
                cbxAldea.addItem("Linaca");
                cbxAldea.addItem("Palmillas");
                cbxAldea.addItem("Quebrada Arriba u Oculí");
                cbxAldea.addItem("Quebrada Larga");
                cbxAldea.addItem("San Diego");
                cbxAldea.addItem("San Julián");
                cbxAldea.addItem("San Marcos Abajo");
                cbxAldea.addItem("Santa María");
                cbxAldea.addItem("Villa Santa");
            } else if (seleccion.equals("El Paraíso")) {
                cbxAldea.addItem("El Paraíso");
                cbxAldea.addItem("Cuyalí");
                cbxAldea.addItem("Dificultades");
                cbxAldea.addItem("Granadillos");
                cbxAldea.addItem("La Unión");
                cbxAldea.addItem("Las Cañas");
                cbxAldea.addItem("Las Flores");
                cbxAldea.addItem("Las Manos");
                cbxAldea.addItem("Las Selvas");
                cbxAldea.addItem("Los Terrones");
                cbxAldea.addItem("Los Volcanes");
                cbxAldea.addItem("San Antonio de Conchagua");
                cbxAldea.addItem("Santa Cruz");
            } else if (seleccion.equals("Teupasenti")) {
                cbxAldea.addItem("Teupasenti");
                cbxAldea.addItem("Agua Fría");
                cbxAldea.addItem("Bañaderos");
                cbxAldea.addItem("El Cantón");
                cbxAldea.addItem("El Corralito");
                cbxAldea.addItem("El Chelón No. 1");
                cbxAldea.addItem("El Chilito");
                cbxAldea.addItem("El Encino");
                cbxAldea.addItem("El Jute");
                cbxAldea.addItem("El Ocotal");
                cbxAldea.addItem("El Rito N.º 1");
                cbxAldea.addItem("El Rito N.º 2");
                cbxAldea.addItem("El Rito del Esquillal");
                cbxAldea.addItem("El Rodeo");
                cbxAldea.addItem("El Suyatal");
                cbxAldea.addItem("Escobas Amarillas");
                cbxAldea.addItem("La Aguja");
                cbxAldea.addItem("La Cebadilla");
                cbxAldea.addItem("La Comunidad");
                cbxAldea.addItem("La Granja");
                cbxAldea.addItem("La Laguna N.º 1");
                cbxAldea.addItem("La Laguna N.º 2");
                cbxAldea.addItem("La Zacatera");
                cbxAldea.addItem("Las Cortinas");
                cbxAldea.addItem("Las Delicias");
                cbxAldea.addItem("Las Flores");
                cbxAldea.addItem("Las Uvas");
                cbxAldea.addItem("Los Plancitos N.º 1");
                cbxAldea.addItem("Paso Hondo");
                cbxAldea.addItem("Pedríos");
                cbxAldea.addItem("Peña Blanca");
                cbxAldea.addItem("Potrerillos");
                cbxAldea.addItem("Quebrada del Zapotillo");
                cbxAldea.addItem("Saladino N.º 1");
                cbxAldea.addItem("San Isidro");
                cbxAldea.addItem("San José del Potrero");
                cbxAldea.addItem("Santa Cruz");
                cbxAldea.addItem("Santa Rosa N.º 1");
                cbxAldea.addItem("Santa Rosa N.º 2");
            } else if (seleccion.equals("Morocelí")) {
                cbxAldea.addItem("Morocelí");
                cbxAldea.addItem("Buena Vista");
                cbxAldea.addItem("El Chile o Quebrada Grande");
                cbxAldea.addItem("El Chilito");
                cbxAldea.addItem("El Llano");
                cbxAldea.addItem("El Plan");
                cbxAldea.addItem("El Retiro");
                cbxAldea.addItem("El Suyate");
                cbxAldea.addItem("Guadalajara");
                cbxAldea.addItem("Hoya Grande");
                cbxAldea.addItem("Las Champas");
                cbxAldea.addItem("Los Limones");
                cbxAldea.addItem("Los Liquidámbos");
                cbxAldea.addItem("Los Pozos");
                cbxAldea.addItem("Mata de Plátano");
                cbxAldea.addItem("Valle Arriba");
            } else if (seleccion.equals("Yuscarán")) {
                cbxAldea.addItem("Yuscarán");
                cbxAldea.addItem("El Barro");
                cbxAldea.addItem("El Cordoncillo");
                cbxAldea.addItem("El Chaguite de Oriente");
                cbxAldea.addItem("El Chaguite Sur");
                cbxAldea.addItem("El Ocotal");
                cbxAldea.addItem("El Pericón");
                cbxAldea.addItem("El Rancho del Obispo");
                cbxAldea.addItem("El Robledal");
                cbxAldea.addItem("El Rodeo");
                cbxAldea.addItem("El Teñidero");
                cbxAldea.addItem("El Zarzal");
                cbxAldea.addItem("La Ciénega");
                cbxAldea.addItem("La Insula");
                cbxAldea.addItem("Las Crucitas");
                cbxAldea.addItem("Los Laínez");
                cbxAldea.addItem("Ojo de Agua");
                cbxAldea.addItem("Sabana Redonda");
            } else if (seleccion.equals("Liure")) {
                cbxAldea.addItem("Asunción");
                cbxAldea.addItem("Bocuire");
                cbxAldea.addItem("Monte Grande");
                cbxAldea.addItem("San Ramón");
                cbxAldea.addItem("Santa Cruz");
            } else if (seleccion.equals("Soledad")) {
                cbxAldea.addItem("Soledad Centro");
                cbxAldea.addItem("La Paz o Rodeíto");
                cbxAldea.addItem("La Victoria");
                cbxAldea.addItem("Las Marías");
                cbxAldea.addItem("Los Alpes");
                cbxAldea.addItem("San Diego");
                cbxAldea.addItem("San Marcos");
                cbxAldea.addItem("Santo Domingo");
            } else if (seleccion.equals("Texiguat")) {
                cbxAldea.addItem("Texiguat");
                cbxAldea.addItem("Asunción");
                cbxAldea.addItem("El Zapotal");
                cbxAldea.addItem("Güinopito");
                cbxAldea.addItem("Jamayupe");
                cbxAldea.addItem("Río Arriba");
                cbxAldea.addItem("San Lorenzo");
                cbxAldea.addItem("San Sebastián");
                cbxAldea.addItem("Cunaire");
            } else if (seleccion.equals("Alauca")) {
                cbxAldea.addItem("Alauca");
                cbxAldea.addItem("Buena Vista");
                cbxAldea.addItem("Chaguite Grande");
                cbxAldea.addItem("El Momotombo");
                cbxAldea.addItem("Chinampa o Chilampa");
                cbxAldea.addItem("El Jícaro");
                cbxAldea.addItem("El Matapalo");
                cbxAldea.addItem("El Pedregalito");
                cbxAldea.addItem("La Chichigua");
                cbxAldea.addItem("La Jagua");
                cbxAldea.addItem("La Manzanilla");
                cbxAldea.addItem("Las Limas");
                cbxAldea.addItem("Las Manos");
                cbxAldea.addItem("Los Matasanos de Río Arriba");
                cbxAldea.addItem("San Antonio");
                cbxAldea.addItem("Sabana Redonda");
            } else if (seleccion.equals("Güinope")) {
                cbxAldea.addItem("Güinope");
                cbxAldea.addItem("Arrayanes");
                cbxAldea.addItem("Casitas");
                cbxAldea.addItem("Galeras");
                cbxAldea.addItem("Las Liquidámbar");
                cbxAldea.addItem("Lavanderos");
                cbxAldea.addItem("Mansaragua");
                cbxAldea.addItem("Pacayas");
                cbxAldea.addItem("Santa Rosa");
                cbxAldea.addItem("Silisgualagua");
                cbxAldea.addItem("Lizapa");
                cbxAldea.addItem("La Arocha");
                cbxAldea.addItem("Ocotales");
                cbxAldea.addItem("Loma Verde");
            } else if (seleccion.equals("San Lucas")) {
                cbxAldea.addItem("San Lucas");
                cbxAldea.addItem("Apalípi");
                cbxAldea.addItem("Candelaria");
                cbxAldea.addItem("Junacatal");
                cbxAldea.addItem("La Montañita");
                cbxAldea.addItem("Los Quebrachos");
                cbxAldea.addItem("Mactuca");
                cbxAldea.addItem("Navijupe");
                cbxAldea.addItem("Surule");
                cbxAldea.addItem("Tapahuasca");
            } else if (seleccion.equals("Oropolí")) {
                cbxAldea.addItem("Oropolí");
                cbxAldea.addItem("Chaguite Grande");
                cbxAldea.addItem("El Barro");
                cbxAldea.addItem("El Corralito");
                cbxAldea.addItem("El Desecho");
                cbxAldea.addItem("El Jícaro");
                cbxAldea.addItem("La Mesa");
                cbxAldea.addItem("Las Casitas");
                cbxAldea.addItem("Las Crucitas");
                cbxAldea.addItem("Orealí");
                cbxAldea.addItem("Samayare");
                cbxAldea.addItem("Rosa de Abril (Agua Podrida)");
                cbxAldea.addItem("Quebrada grande");
                cbxAldea.addItem("El Carrizal");
                cbxAldea.addItem("El Hisopo");
            } else if (seleccion.equals("San Antonio de Flores")) {
                cbxAldea.addItem("San Antonio de Flores");
                cbxAldea.addItem("Apalípi");
                cbxAldea.addItem("Comunidad");
                cbxAldea.addItem("El Chaguite");
                cbxAldea.addItem("El Espinal");
                cbxAldea.addItem("Mandasta");
                cbxAldea.addItem("Orlica");
                cbxAldea.addItem("Quebrada Grande");
                cbxAldea.addItem("Tolobrito");
            } else if (seleccion.equals("San Matías")) {
                cbxAldea.addItem("San Matías");
                cbxAldea.addItem("Corral Falso");
                cbxAldea.addItem("El Espinito");
                cbxAldea.addItem("El Guayacán");
                cbxAldea.addItem("El Robledal");
                cbxAldea.addItem("La Concepción");
                cbxAldea.addItem("Las Tunas");
                cbxAldea.addItem("San Jerónimo");
                cbxAldea.addItem("Santa Rosa");
            } else if (seleccion.equals("Vado Ancho")) {
                cbxAldea.addItem("Vado Ancho");
                cbxAldea.addItem("Chaperna");
                cbxAldea.addItem("Las Uvillas");
                cbxAldea.addItem("San Jerónimo de Vado Ancho");
                cbxAldea.addItem("Tolobre");
            } else if (seleccion.equals("Jacaleapa")) {
                cbxAldea.addItem("Jacaleapa");
                cbxAldea.addItem("La Chorrera");
                cbxAldea.addItem("Lomas Limpias");
            } else if (seleccion.equals("Potrerillos")) {
                cbxAldea.addItem("Potrerillos");
                cbxAldea.addItem("El Junquillo");
                cbxAldea.addItem("El Limoncillo");
                cbxAldea.addItem("Las Crucitas");
                cbxAldea.addItem("Las Delicias");
                cbxAldea.addItem("Loma de Enmedio");
                cbxAldea.addItem("Lomanillos");
                cbxAldea.addItem("Sabana Redonda");
            } else if (seleccion.equals("Yauyupe")) {
                cbxAldea.addItem("Yauyupe");
                cbxAldea.addItem("Chaguitillos (El Río)");
                cbxAldea.addItem("El Hornito");
                cbxAldea.addItem("El Picadero");
                cbxAldea.addItem("La Cuevita");
                cbxAldea.addItem("Cusmatu");
            } else {
                cbxAldea.addItem("Selección no válida");
            }
        }
    }//GEN-LAST:event_cbxMunicbxMuniItemStateChanged

    private void txtSalarioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSalarioKeyTyped
        char c = evt.getKeyChar();
        String texto = txtSalario.getText();
        if ((c < '0' || c > '9') && (texto.length() <= 5) || txtSalario.getText().length() >= 5) {
            evt.consume();
        }
    }//GEN-LAST:event_txtSalarioKeyTyped

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
//        Listado_Empleados abrir = new Listado_Empleados();
//        abrir.setVisible(true);
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static final javax.swing.JButton btn_crear4 = new javax.swing.JButton();
    private javax.swing.JComboBox<String> cbxAldea;
    private javax.swing.JComboBox<String> cbxMuni;
    public javax.swing.JComboBox<String> cbx_estC;
    public static javax.swing.JComboBox<String> cbx_sexo;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private com.toedter.calendar.JDateChooser jdFechaNac;
    public javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtApellido6;
    private javax.swing.JTextField txtCelular;
    public javax.swing.JTextField txtDireccion;
    public static javax.swing.JTextField txtDni;
    public javax.swing.JTextField txtNacionalidad;
    public javax.swing.JTextField txtNombre;
    public javax.swing.JTextField txtNombre6;
    public javax.swing.JTextField txtRtn;
    private javax.swing.JTextField txtSalario;
    public javax.swing.JTextField txt_FijoCel;
    public javax.swing.JTextField txt_RefeDireccion;
    // End of variables declaration//GEN-END:variables
}
